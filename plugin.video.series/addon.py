import base64;exec base64.b64decode('# -*- coding: utf-8 -*-
import base64
import os
import sqlite3
import sys
import unicodedata
import urlparse
from urlparse import parse_qsl
if 97 - 97: OOoOoO0o0o0OO + IIII . Ii % oOO
import xbmc
import xbmcaddon
import xbmcgui
import xbmcplugin
import idb
if 1 - 1: II - iiIIi1i1Iii - I1 - IIoooO0ooO0oo * OOO
import seriecrypt
try :
 import json
except :
 import simplejson as json
 if 5 - 5: i1iI1 + o00oO0oo0O0O0 - ii1I1ii1IiIi1 % oooOoO - IiII1IiI
def oooo00OoOoOo0 ( s ) :
 return '' . join ( ( c for c in unicodedata . normalize ( 'NFD' , s ) if unicodedata . category ( c ) != 'Mn' ) )
 if 86 - 86: o0 + iI11
 if 36 - 36: OO00o00O + oooO0OO
def oOOoO ( bas ) :
 seriecrypt . I1I1i11iiIi ( bas )
 if 54 - 54: O0ooo0o0OOO . o0O0ooO0oo0o + iiIIi1i1Iii . o00oO0oo0O0O0 / o00oO0oo0O0O0
 if 37 - 37: OO00o00O % o00oO0oo0O0O0 % iI11 % iI11 * o0O0ooO0oo0o % ii1I1ii1IiIi1
def ii1IIiI11iI1i ( ) :
 import xbmc
 iiI1IIiI = xbmc . Keyboard ( "" )
 iiI1IIiI . doModal ( )
 oooOo0o0oo0O = ''
 if ( iiI1IIiI . isConfirmed ( ) ) :
  oooOo0o0oo0O = iiI1IIiI . getText ( )
 return oooOo0o0oo0O
 if 65 - 65: O0ooo0o0OOO - Ii
 if 87 - 87: iI11 % oooO0OO - iiIIi1i1Iii % i1iI1 % oooOoO % oooO0OO
 if 5 - 5: OOoOoO0o0o0OO . OOO - ii1I1ii1IiIi1 . oooOoO * Ii
Ooo = 'utf-8'
iii1II = '.tmp'
I111i11I1I = 'action'
i11ii = xbmcaddon . Addon ( )
o0O0oO0 = i11ii . getAddonInfo ( 'version' )
IIIi1111iI = xbmc . translatePath ( i11ii . getAddonInfo ( 'path' ) . decode ( Ooo ) )
iiIIiiiI11 = xbmc . translatePath ( i11ii . getAddonInfo ( 'profile' ) . decode ( Ooo ) )
O00O000 = os . path . join ( IIIi1111iI , "resources/media/" )
if 84 - 84: oooO0OO / I1 - OOoOoO0o0o0OO - oooO0OO . OOoOoO0o0o0OO - oooO0OO
o0oo0O = base64 . urlsafe_b64decode ( 'JXMvYmFzX2VuYyVz' ) % ( iiIIiiiI11 , iii1II )
OOoOO = '%s/favoritosV1.fav' % iiIIiiiI11
ii = [ "serie_id" , "nombre" , "link" , "nombre" , "anno" , "sinopsis" , "caratula" , "poster" , "has_content" , "audio" , "category" , "date(updated)" ]
OoooO0O = 200
if 95 - 95: IiII1IiI % OO00o00O
if not os . path . exists ( iiIIiiiI11 ) :
 try :
  os . makedirs ( iiIIiiiI11 )
 except :
  pass
iII1Ii = urlparse . parse_qs ( sys . argv [ 2 ] [ 1 : ] )
o0O0o = sys . argv [ 0 ]
oo0oO0OO0OO0O = int ( sys . argv [ 1 ] )
try :
 if 36 - 36: o0O0ooO0oo0o / o0 + oOO / oooO0OO + Ii + IIII
 O0OOO = idb . I1i1I1iI11I ( base64 . urlsafe_b64decode ( 'c2VsZWN0IGlkUGF0aCBmcm9tIHBhdGggd2hlcmUgc3RyUGF0aD0icGx1Z2luOi8vcGx1Z2luLnZpZGVvLnNlcmllcy8i' ) ) [ 1 ] [ 0 ] [ 0 ]
except :
 O0OOO = 0
 if 70 - 70: iiIIi1i1Iii - oOO - oooOoO . iiIIi1i1Iii % oooO0OO . o0
 if 34 - 34: OO00o00O + oooO0OO
def Iii1I1i ( path , type = 'r' ) :
 o00 = open ( str ( path ) , type )
 I11Iii11i1Ii1 = o00 . read ( )
 o00 . close ( )
 return I11Iii11i1Ii1
 if 36 - 36: iiIIi1i1Iii / oooOoO + o00oO0oo0O0O0
 if 33 - 33: iiIIi1i1Iii . ii1I1ii1IiIi1
def iII1I1I ( ) :
 OO00Ooo0o = json . loads ( base64 . urlsafe_b64decode ( Iii1I1i ( '%s/favoritos.fav' % iiIIiiiI11 ) ) )
 for oO , ii1iI111iIi1 in OO00Ooo0o . iteritems ( ) :
  ii1iI111iIi1 [ 1 ] = base64 . urlsafe_b64encode ( ii1iI111iIi1 [ 1 ] )
  OO00Ooo0o [ oO ] = ii1iI111iIi1
 O0O = open ( OOoOO , "w" )
 O0O . write ( base64 . urlsafe_b64encode ( json . dumps ( OO00Ooo0o ) ) )
 O0O . close ( )
 os . remove ( '%s/favoritos.fav' % iiIIiiiI11 )
 return OO00Ooo0o
 if 90 - 90: oOO . oOO - IIoooO0ooO0oo + o0 . IIII . o0
if os . path . exists ( OOoOO ) == True :
 oOOooo00Oooo = json . loads ( base64 . urlsafe_b64decode ( Iii1I1i ( OOoOO ) ) )
elif os . path . exists ( '%s/favoritos.fav' % iiIIiiiI11 ) == True :
 oOOooo00Oooo = iII1I1I ( )
else :
 oOOooo00Oooo = { }
 if 75 - 75: IIII . o0O0ooO0oo0o . oOO + oOO + IIII . o00oO0oo0O0O0
 if 23 - 23: O0ooo0o0OOO + Ii + O0ooo0o0OOO . i1iI1 . OOO * II
 if 63 - 63: iiIIi1i1Iii / OOO + OOO * OO00o00O . OOO
 if 56 - 56: i1iI1
 if 27 - 27: oooOoO % IIoooO0ooO0oo * IIoooO0ooO0oo . iI11
def ii1II ( nombre , caratula = None , poster = None , video = { } , isPlayable = False ) :
 III1IiiI = xbmcgui . ListItem ( label = nombre , iconImage = caratula )
 if caratula and poster :
  III1IiiI . setArt ( I1i ( caratula , poster ) )
 if len ( video ) > 0 :
  III1IiiI . setInfo ( 'video' , video )
 if isPlayable :
  III1IiiI . setProperty ( 'IsPlayable' , 'true' )
 return III1IiiI
 if 81 - 81: oooO0OO
 if 41 - 41: o00oO0oo0O0O0 - O0ooo0o0OOO / I1 % IiII1IiI / o00oO0oo0O0O0
 if 52 - 52: ii1I1ii1IiIi1 % OO00o00O . o00oO0oo0O0O0 / oooOoO
def iiI1111IIiiI ( idFile , idPath , fileName , to_watch ) :
 if to_watch :
  ooo0ooOoO0Oo = ( 'Marcar como visto' , 'XBMC.RunPlugin(%s?action=to_watch&idFile=%s&idPath=%s&fileName=%s)' % ( o0O0o , idFile , idPath , base64 . urlsafe_b64encode ( fileName ) ) )
 else :
  ooo0ooOoO0Oo = ( 'Marcar como no visto' , 'XBMC.RunPlugin(%s?action=to_unwatch&idFile=%s&idPath=%s&fileName=%s)' % ( o0O0o , idFile , idPath , base64 . urlsafe_b64encode ( fileName ) ) )
 return ooo0ooOoO0Oo
 if 32 - 32: ii1I1ii1IiIi1 + I1 - o0O0ooO0oo0o % OO00o00O + oOO
def ii11iIIi1I ( idFile , idPath , fileName , to_watch ) :
 fileName = base64 . urlsafe_b64decode ( fileName )
 if to_watch :
  o0Oo = 1
 else :
  o0Oo = 0
 if int ( idFile ) > 0 :
  I1i1I1iI11I = "update files set playCount=%s where idFile=%s AND idPath=%s AND strFilename='%s'" % ( o0Oo , idFile , idPath , fileName )
 else :
  I1i1I1iI11I = "insert into files (idFile, idPath, strFilename, playCount, lastPlayed) VALUES (%s, %s, '%s', %s, %s)" % ( '(select max (idFile) +1 from files)' , idPath , fileName , o0Oo , "datetime('now')" )
 idb . I1i1I1iI11I ( I1i1I1iI11I )
 xbmc . executebuiltin ( "XBMC.Container.Refresh" )
 if 17 - 17: OOoOoO0o0o0OO - IIoooO0ooO0oo + iiIIi1i1Iii
 if 11 - 11: iI11 + IIoooO0ooO0oo - iI11
def IIIII ( id , nombre , url , caratula , poster , refresh = None ) :
 try :
  nombre = nombre . encode ( 'utf-8' , 'ignore' )
 except ( UnicodeEncodeError , UnicodeDecodeError ) :
  pass
 if id not in oOOooo00Oooo :
  ooo0ooOoO0Oo = ( 'Añadir a tus Series Favoritas' , 'XBMC.RunPlugin(%s?action=addfav&id=%s&nombre=%s&url=%s&caratula=%s&poster=%s)' % ( o0O0o , id , base64 . urlsafe_b64encode ( nombre ) , base64 . urlsafe_b64encode ( url ) , base64 . urlsafe_b64encode ( caratula ) , base64 . urlsafe_b64encode ( poster ) ) )
 else :
  ooo0ooOoO0Oo = ( 'Eliminar de tus Series Favoritas' , 'XBMC.RunPlugin(%s?action=rmfav&id=%s&nombre=%s&url=%s&caratula=%s&poster=%s&refresh=%s)' % ( o0O0o , id , base64 . urlsafe_b64encode ( nombre ) , base64 . urlsafe_b64encode ( url ) , base64 . urlsafe_b64encode ( caratula ) , base64 . urlsafe_b64encode ( poster ) , refresh ) )
 return ooo0ooOoO0Oo
 if 49 - 49: iI11
 if 10 - 10: IIII
def iii1iIII1111I ( options ) :
 i11i1 = json . loads ( base64 . urlsafe_b64decode ( Iii1I1i ( OOoOO ) ) )
 i11i1 . pop ( options [ 'id' ] , None )
 O0O = open ( OOoOO , "w" )
 O0O . write ( base64 . urlsafe_b64encode ( json . dumps ( i11i1 ) ) )
 O0O . close ( )
 if 'refresh' in options and options [ 'refresh' ] :
  xbmc . executebuiltin ( "XBMC.Container.Refresh" )
  if 35 - 35: o00oO0oo0O0O0 . O0ooo0o0OOO % oOO
def O000OOo0oo0 ( ) :
 OO00O0OOO0o = [ ]
 if os . path . exists ( OOoOO ) == False :
  iiiIIIiI = open ( OOoOO , "w" )
  iiiIIIiI . write ( base64 . urlsafe_b64encode ( json . dumps ( { } ) ) )
  iiiIIIiI . close ( )
 else :
  items = json . loads ( base64 . urlsafe_b64decode ( Iii1I1i ( OOoOO ) ) )
  for oO , IiiI11iii in items . iteritems ( ) :
   o0OOoo0 = IiiI11iii [ 0 ] . encode ( 'utf-8' )
   ii1Ii = IiiI11iii [ 1 ] . encode ( 'utf-8' )
   try :
    if 97 - 97: o00oO0oo0O0O0 / i1iI1 - OOO * O0ooo0o0OOO % Ii % oooOoO
    ii1Ii = IiiI11iii [ 1 ] . encode ( 'utf-8' , 'ignore' )
   except :
    pass
   Iii1iiiI1iIII = IiiI11iii [ 2 ] . encode ( 'utf-8' )
   O0oOooOoOo0 = IiiI11iii [ 3 ] . encode ( 'utf-8' )
   oOO00OoO0oo = IiiI11iii [ 4 ] . encode ( 'utf-8' )
   oo0o0ooooO = base64 . urlsafe_b64decode ( oOO00OoO0oo )
   O000000O0OoOo = base64 . urlsafe_b64decode ( O0oOooOoOo0 )
   ii1Ii = base64 . urlsafe_b64decode ( ii1Ii )
   OoOO0OO0o0O = False
   if len ( o0OOoo0 . split ( '-' ) ) == 3 :
    OoOO0OO0o0O = True
   III1IiiI = ii1II ( nombre = ii1Ii , caratula = O000000O0OoOo , poster = oo0o0ooooO , isPlayable = OoOO0OO0o0O )
   III1IiiI . addContextMenuItems ( [ IIIII ( id = str ( IiiI11iii [ 0 ] ) , nombre = ii1Ii , url = Iii1iiiI1iIII ,
 caratula = O0oOooOoOo0 , poster = oOO00OoO0oo , refresh = True ) ] )
   if 39 - 39: i1iI1 % oOO . o00oO0oo0O0O0 - o0 * o0O0ooO0oo0o
   OO00O0OOO0o . append ( ( base64 . urlsafe_b64decode ( Iii1iiiI1iIII ) , III1IiiI , not OoOO0OO0o0O ) )
 try :
  if 27 - 27: Ii
  xbmc . executebuiltin ( "Container.SetViewMode(500)" )
 except :
  pass
 xbmcplugin . addDirectoryItems ( oo0oO0OO0OO0O , OO00O0OOO0o , len ( OO00O0OOO0o ) )
 xbmcplugin . endOfDirectory ( oo0oO0OO0OO0O )
 if 94 - 94: O0ooo0o0OOO - oooOoO
 if 70 - 70: iI11 . iiIIi1i1Iii * o0O0ooO0oo0o
def oOo00o00o0 ( options ) :
 iII1 = { }
 ii1Ii = options [ 'nombre' ]
 Ooo0Oo = False
 if os . path . exists ( OOoOO ) == False :
  iII1 [ options [ 'id' ] ] = ( options [ 'id' ] , options [ 'nombre' ] , options [ 'url' ] , options [ 'caratula' ] , options [ 'poster' ] )
  iiiIIIiI = open ( OOoOO , "w" )
  iiiIIIiI . write ( base64 . urlsafe_b64encode ( json . dumps ( iII1 ) ) )
  iiiIIIiI . close ( )
 else :
  i11i1 = json . loads ( base64 . urlsafe_b64decode ( Iii1I1i ( OOoOO ) ) )
  i11i1 [ options [ 'id' ] ] = ( options [ 'id' ] , options [ 'nombre' ] , options [ 'url' ] , options [ 'caratula' ] , options [ 'poster' ] )
  O0O = open ( OOoOO , "w" )
  O0O . write ( base64 . urlsafe_b64encode ( json . dumps ( i11i1 ) ) )
  O0O . close ( )
 xbmc . executebuiltin ( "XBMC.Container.Refresh" )
 Oo00o0O0oOo0 = xbmcgui . Dialog ( )
 Oo00o0O0oOo0 . notification ( 'Serie' , 'Favorito añadido a tus [COLOR gold]Series[/COLOR] [COLOR blue]CA[/COLOR][COLOR yellow]TO[/COLOR][COLOR red]AL[/COLOR]' , xbmcgui . NOTIFICATION_INFO , 3000 )
 if 100 - 100: II * OOoOoO0o0o0OO + OOO * ii1I1ii1IiIi1 * OOO
def I1i ( caratula , poster ) :
 if caratula == None :
  caratula = ''
 if poster == None :
  poster = ''
 return { 'icon' : caratula , 'fanart' : poster , 'thumb' : caratula }
 if 84 - 84: iI11 + oOO . o0O0ooO0oo0o % O0ooo0o0OOO % IiII1IiI * iiIIi1i1Iii
 if 26 - 26: iiIIi1i1Iii . OO00o00O
def i1IIiiII ( dimension ) :
 if dimension :
  OOO0Ooo0 = dimension . split ( "x" )
  if len ( OOO0Ooo0 ) == 2 :
   IiI1I1II = int ( OOO0Ooo0 [ 0 ] )
   Oo00OooO = int ( OOO0Ooo0 [ 1 ] )
   if IiI1I1II == 0 or Oo00OooO == 0 :
    return ""
   elif IiI1I1II <= 720 and Oo00OooO <= 480 :
    return "[COLOR oldlace](SD)[/COLOR]"
   elif IiI1I1II <= 768 and Oo00OooO <= 576 :
    return "[COLOR moccasin](HD)[/COLOR]"
   elif IiI1I1II <= 960 and Oo00OooO <= 544 :
    return "[COLOR peachpuff](HD)[/COLOR]"
   elif IiI1I1II <= 1280 and Oo00OooO <= 720 :
    return "[COLOR sandybrown](720)[/COLOR]"
   else :
    return "[COLOR chocolate](1080)[/COLOR]"
  else :
   return ""
 return ""
 if 27 - 27: IIII . IIII % OOoOoO0o0o0OO
 if 62 - 62: Ii . OOoOoO0o0o0OO
def i1I ( serie_sinop , serie_caratula , serie_poster , temp_sinop , temp_caratula , temp_poster ) :
 i11i1 = [ ]
 if temp_sinop == None :
  i11i1 . append ( serie_sinop )
 else :
  i11i1 . append ( temp_sinop )
 if temp_caratula == None :
  i11i1 . append ( serie_caratula )
 else :
  i11i1 . append ( temp_caratula )
 if temp_poster == None :
  i11i1 . append ( serie_poster )
 else :
  i11i1 . append ( temp_poster )
 return i11i1
 if 66 - 66: OOO . oooOoO
 if 60 - 60: oooOoO / ii1I1ii1IiIi1 * oooOoO
 if 22 - 22: o0 / IIoooO0ooO0oo - o0O0ooO0oo0o
 if 17 - 17: oOO - IIII + I1
def iIiIi ( operator , value , params ) :
 oooo0Oo0oOo = ", CASE When unicode(upper(substr(nombre, 1, 1))) >= 192 AND unicode(upper(substr(nombre, 1, 1))) <= 198 Then 'A'When unicode(upper(substr(nombre, 1, 1))) >= 204 AND unicode(upper(substr(nombre, 1, 1))) <= 207 Then 'I'When unicode(upper(substr(nombre, 1, 1))) >= 200 AND unicode(upper(substr(nombre, 1, 1))) <= 203 Then 'E'When unicode(upper(substr(nombre, 1, 1))) >= 217 AND unicode(upper(substr(nombre, 1, 1))) <= 220 Then 'U'When unicode(upper(substr(nombre, 1, 1))) >= 210 AND unicode(upper(substr(nombre, 1, 1))) <= 214 Then 'O' WHEN unicode(upper(substr(nombre, 1, 1))) >= 65 AND unicode(upper(substr(nombre, 1, 1))) <= 90 THEN upper(substr(nombre, 1, 1)) ELSE '!0-9..'  END alfa "
 oo = sqlite3 . connect ( o0oo0O )
 OO0O000oooOOO = oo . cursor ( )
 II1iiiiI = 1
 if 'page' in params and 'c_page' in params and 'alfa' in params :
  II1iiiiI = int ( params [ 'c_page' ] )
  OO0O000oooOOO . execute ( "Select " + "," . join ( ii ) + oooo0Oo0oOo + " from series where lower(category) " + operator + " ? AND " + base64 . urlsafe_b64decode ( params [ 'alfa' ] ) + " AND " + base64 . urlsafe_b64decode ( params [ 'page' ] ) + " order by alfa asc, nombre asc LIMIT " + str ( OoooO0O ) , ( value , ) )
 else :
  OO0O000oooOOO . execute ( "Select " + "," . join ( ii ) + oooo0Oo0oOo + " from series where lower(category) " + operator + " ? order by alfa asc, nombre asc LIMIT " + str ( OoooO0O ) , ( value , ) )
 iiii111 = OO0O000oooOOO . fetchall ( )
 oo . close ( )
 oooO00o0oO ( iiii111 , False , True , False , II1iiiiI , params )
 if 46 - 46: IIoooO0ooO0oo - O0ooo0o0OOO % IiII1IiI / IIII
 if 61 - 61: o0O0ooO0oo0o / ii1I1ii1IiIi1 . I1 % IIII - o0
def IiiI1I1I1iIiI ( ) :
 oo = sqlite3 . connect ( o0oo0O )
 OO0O000oooOOO = oo . cursor ( )
 OO0O000oooOOO . execute ( "Select " + "," . join ( ii ) + " from series order by updated desc limit 200" )
 iiii111 = OO0O000oooOOO . fetchall ( )
 oo . close ( )
 oooO00o0oO ( iiii111 , True , True , True )
 if 49 - 49: i1iI1 % IiII1IiI
 if 71 - 71: oooO0OO . oOO . o0 * Ii
def Oo0oOOoOOO ( ) :
 oo = sqlite3 . connect ( o0oo0O )
 OO0O000oooOOO = oo . cursor ( )
 OO0O000oooOOO . execute ( "Select " + "," . join ( ii ) + " from series order by views desc, nombre asc limit 200" )
 iiii111 = OO0O000oooOOO . fetchall ( )
 oo . close ( )
 oooO00o0oO ( iiii111 , True , True , False )
 if 17 - 17: oooO0OO - o0O0ooO0oo0o + IiII1IiI * o0O0ooO0oo0o
def OooO0OOo0 ( ) :
 oooo0Oo0oOo = ", CASE When unicode(upper(substr(nombre, 1, 1))) >= 192 AND unicode(upper(substr(nombre, 1, 1))) <= 198 Then 'A'When unicode(upper(substr(nombre, 1, 1))) >= 204 AND unicode(upper(substr(nombre, 1, 1))) <= 207 Then 'I'When unicode(upper(substr(nombre, 1, 1))) >= 200 AND unicode(upper(substr(nombre, 1, 1))) <= 203 Then 'E'When unicode(upper(substr(nombre, 1, 1))) >= 217 AND unicode(upper(substr(nombre, 1, 1))) <= 220 Then 'U'When unicode(upper(substr(nombre, 1, 1))) >= 210 AND unicode(upper(substr(nombre, 1, 1))) <= 214 Then 'O' WHEN unicode(upper(substr(nombre, 1, 1))) >= 65 AND unicode(upper(substr(nombre, 1, 1))) <= 90 THEN upper(substr(nombre, 1, 1)) ELSE '!0-9..'  END alfa "
 if 32 - 32: IIoooO0ooO0oo - OOO / oooOoO
 iII1iIIiIi11I = ii1IIiI11iI1i ( )
 if iII1iIIiIi11I :
  oo = sqlite3 . connect ( o0oo0O )
  OO0O000oooOOO = oo . cursor ( )
  if 40 - 40: IIII + o0 - oooOoO . OOO . OOO . OOoOoO0o0o0OO
  iII1iIIiIi11I = '%' + iII1iIIiIi11I + '%'
  try :
   OO0O000oooOOO . execute ( "Select " + "," . join ( ii ) + oooo0Oo0oOo + " from series where nombre like ? order by alfa asc, nombre asc" , ( unicode ( iII1iIIiIi11I . decode ( 'utf-8' ) ) , ) )
  except :
   OO0O000oooOOO . execute ( "Select " + "," . join ( ii ) + oooo0Oo0oOo + " from series where nombre like ? order by alfa asc, nombre asc" , ( oooo00OoOoOo0 ( unicode ( iII1iIIiIi11I . decode ( 'utf-8' ) ) ) . upper ( ) , ) )
  iiii111 = OO0O000oooOOO . fetchall ( )
  if len ( iiii111 ) == 0 :
   OO0O000oooOOO . execute ( "Select " + "," . join ( ii ) + " from series where nombre like ? order by nombre asc" ,
 ( oooo00OoOoOo0 ( unicode ( iII1iIIiIi11I . decode ( 'utf-8' ) ) ) . upper ( ) , ) )
   iiii111 = OO0O000oooOOO . fetchall ( )
  oo . close ( )
  oooO00o0oO ( iiii111 , True , True , False )
  if 58 - 58: IiII1IiI * OOoOoO0o0o0OO
def Oo000ooO0OO ( audio = None , category = 'General' ) :
 if not audio :
  oo = sqlite3 . connect ( o0oo0O )
  OO0O000oooOOO = oo . cursor ( )
  OO0O000oooOOO . execute ( "Select audio,count(audio) from series where audio!='Castellano' group by audio order by audio" )
  iiii111 = OO0O000oooOOO . fetchall ( )
  oo . close ( )
  OO00O0OOO0o = [ ]
  for ooOOOO0o in iiii111 :
   audio = ooOOOO0o [ 0 ]
   O000oOOo = ooOOOO0o [ 1 ]
   oOOoO00Oo = '[COLOR gold]%s[/COLOR] (%s)' % ( audio , O000oOOo )
   III1IiiI = ii1II ( nombre = oOOoO00Oo , caratula = '' )
   Iii1iiiI1iIII = '{0}?action=seriesByLang&lang={1}' . format ( o0O0o , audio )
   oOOo = True
   OO00O0OOO0o . append ( ( Iii1iiiI1iIII , III1IiiI , oOOo ) )
  try :
   if 66 - 66: IIoooO0ooO0oo . i1iI1 - OOoOoO0o0o0OO . II % IIII
   xbmc . executebuiltin ( "Container.SetViewMode(502)" )
  except :
   pass
  xbmcplugin . addDirectoryItems ( oo0oO0OO0OO0O , OO00O0OOO0o , len ( OO00O0OOO0o ) )
  xbmcplugin . endOfDirectory ( oo0oO0OO0OO0O )
 else :
  iiii111 = i11II1IIiii1i ( "series" , ii , [ "audio" ] , [ audio ] , [ "nombre" ] )
  oooO00o0oO ( iiii111 , True , None , False )
  if 66 - 66: I1 / oooOoO
  if 45 - 45: OO00o00O
def o00OO00 ( letra = None ) :
 O0OO00oO00Oo = { 'A' : 'unicode(upper(substr(nombre, 1, 1))) >= 192 AND unicode(upper(substr(nombre, 1, 1))) <= 198' ,
 'E' : 'unicode(upper(substr(nombre, 1, 1))) >= 200 AND unicode(upper(substr(nombre, 1, 1))) <= 203' ,
 'I' : 'unicode(upper(substr(nombre, 1, 1))) >= 204 AND unicode(upper(substr(nombre, 1, 1))) <= 207' ,
 'O' : 'unicode(upper(substr(nombre, 1, 1))) >= 210 AND unicode(upper(substr(nombre, 1, 1))) <= 214' ,
 'U' : 'unicode(upper(substr(nombre, 1, 1))) >= 217 AND unicode(upper(substr(nombre, 1, 1))) <= 220' }
 OO00 = '!0-9..'
 i1i1IIiIi = 'unicode(upper(substr(nombre, 1, 1))) >= 65 AND unicode(upper(substr(nombre, 1, 1))) <= 90'
 if 43 - 43: II + oooOoO * OO00o00O * O0ooo0o0OOO
 if not letra :
  o0Ii1 = "" . join ( [ "When " + o0O + " Then '" + O0OooO0 + "'" for O0OooO0 , o0O in O0OO00oO00Oo . iteritems ( ) ] )
  oo = sqlite3 . connect ( o0oo0O )
  OO0O000oooOOO = oo . cursor ( )
  OO0O000oooOOO . execute ( "select alfa, count (alfa) from (select CASE " + o0Ii1 + " WHEN " + i1i1IIiIi + " THEN upper(substr(nombre, 1, 1)) ELSE '!0-9..'  END alfa, nombre, serie_id from series) group by alfa order by alfa" )
  iiii111 = OO0O000oooOOO . fetchall ( )
  oo . close ( )
  OO00O0OOO0o = [ ]
  for ooOOOO0o in iiii111 :
   letra = ooOOOO0o [ 0 ]
   O000oOOo = ooOOOO0o [ 1 ]
   oOOoO00Oo = '[COLOR gold]%s[/COLOR] (%s)' % ( letra , O000oOOo )
   III1IiiI = ii1II ( nombre = oOOoO00Oo , caratula = '' )
   Iii1iiiI1iIII = '{0}?action=seriesByAZ&letra={1}' . format ( o0O0o , letra )
   oOOo = True
   OO00O0OOO0o . append ( ( Iii1iiiI1iIII , III1IiiI , oOOo ) )
  try :
   if 12 - 12: oooO0OO
   xbmc . executebuiltin ( "Container.SetViewMode(502)" )
  except :
   pass
  xbmcplugin . addDirectoryItems ( oo0oO0OO0OO0O , OO00O0OOO0o , len ( OO00O0OOO0o ) )
  xbmcplugin . endOfDirectory ( oo0oO0OO0OO0O )
 else :
  oo = sqlite3 . connect ( o0oo0O )
  OO0O000oooOOO = oo . cursor ( )
  if letra in O0OO00oO00Oo :
   O0OO00oO00Oo [ letra ] = O0OO00oO00Oo [ letra ] + ' OR'
  elif letra == OO00 :
   O0OO00oO00Oo [ letra ] = "AND" . join ( [ " NOT ( " + o0O + ") " for O0OooO0 , o0O in O0OO00oO00Oo . iteritems ( ) ] ) + " AND NOT (" + i1i1IIiIi + ") OR"
  else :
   O0OO00oO00Oo [ letra ] = ''
  OO0O000oooOOO . execute ( "select " + "," . join ( ii ) + " from series where " + O0OO00oO00Oo [ letra ] + " upper(substr(nombre, 1, 1)) == ?" , ( letra , ) )
  iiii111 = OO0O000oooOOO . fetchall ( )
  oo . close ( )
  oooO00o0oO ( iiii111 , True , True , False )
  if 62 - 62: o0O0ooO0oo0o % oooO0OO - i1iI1 / i1iI1 . iiIIi1i1Iii
  if 80 - 80: OOoOoO0o0o0OO / IIII * iI11 % oooOoO . o00oO0oo0O0O0
def OOoO0oo0oo00 ( ) :
 o00O0o00o = [ ]
 o00O0o00o . append ( { 'title' : 'Favoritos' , I111i11I1I : 'listfav' , 'ico' : 'favoritos' , 'fan' : 'fanart_series' } )
 o00O0o00o . append ( { 'title' : 'Series' , I111i11I1I : 'series' , 'ico' : 'series' , 'fan' : 'fanart_series' } )
 o00O0o00o . append ( { 'title' : 'Series Infantiles' , I111i11I1I : 'seriesInf' , 'ico' : 'dibujos' , 'fan' : 'fanart_dibujos' } )
 o00O0o00o . append ( { 'title' : 'Series Retro' , I111i11I1I : 'retro' , 'ico' : 'retro' , 'fan' : 'fanart_retro' } )
 o00O0o00o . append ( { 'title' : 'Buscar Serie' , I111i11I1I : 'searchSerie' , 'ico' : 'buscar' , 'fan' : 'fanart_series' } )
 o00O0o00o . append ( { 'title' : 'Series Otros Idiomas' , I111i11I1I : 'seriesByLang' , 'ico' : 'buscar' , 'fan' : 'fanart_series' } )
 o00O0o00o . append ( { 'title' : 'Series A-Z' , I111i11I1I : 'seriesByAZ' , 'ico' : 'buscar' , 'fan' : 'fanart_series' } )
 o00O0o00o . append ( { 'title' : 'Últimos Capítulos' , I111i11I1I : 'ultimas' , 'ico' : 'buscar' , 'fan' : 'fanart_series' } )
 o00O0o00o . append ( { 'title' : 'Series más vistas' , I111i11I1I : 'masvisto' , 'ico' : 'buscar' , 'fan' : 'fanart_series' } )
 return o00O0o00o
 if 11 - 11: iI11 . iI11 / o0O0ooO0oo0o
 if 23 - 23: IIII . OO00o00O / o0
def O00ooo00O ( ) :
 oOOoO ( o0oo0O )
 o00O0o00o = OOoO0oo0oo00 ( )
 OO00O0OOO0o = [ ]
 for iiOo00oOO in o00O0o00o :
  III1IiiI = ii1II ( nombre = iiOo00oOO [ 'title' ] , caratula = '%s/%s.jpg' % ( O00O000 , iiOo00oOO [ 'ico' ] ) , poster = '%s/%s.jpg' % ( O00O000 , iiOo00oOO [ 'fan' ] ) )
  Iii1iiiI1iIII = '{0}?{1}={2}' . format ( o0O0o , I111i11I1I , iiOo00oOO [ I111i11I1I ] )
  oOOo = True
  OO00O0OOO0o . append ( ( Iii1iiiI1iIII , III1IiiI , oOOo ) )
 try :
  if 18 - 18: IiII1IiI
  xbmc . executebuiltin ( "Container.SetViewMode(500)" )
 except :
  pass
 xbmcplugin . addDirectoryItems ( oo0oO0OO0OO0O , OO00O0OOO0o , len ( OO00O0OOO0o ) )
 xbmcplugin . endOfDirectory ( oo0oO0OO0OO0O )
 if 7 - 7: oooOoO * IiII1IiI . iiIIi1i1Iii % oooO0OO * o0
 if 35 - 35: I1 - OO00o00O / IIII - OOO * OO00o00O + iiIIi1i1Iii
 if 61 - 61: IIoooO0ooO0oo . oOO / iiIIi1i1Iii . IIoooO0ooO0oo
def I11IIi11 ( rows = [ ] , serie_id = None , carat = None , poste = None ) :
 try :
  xbmcplugin . setContent ( oo0oO0OO0OO0O , "episodes" )
  xbmc . executebuiltin ( "Container.SetViewMode(502)" )
 except :
  pass
  if 27 - 27: oOO
 o0o = { }
 if 10 - 10: oOO . oOO / OO00o00O / oooO0OO
 oOOOoo , oo0OO0Oo0 = idb . I1i1I1iI11I ( 'select files.idFile, idPath, strFilename, playCount, iVideoWidth||"x"||iVideoHeight from files, streamdetails where streamdetails.idFile = files.idFile and iStreamType=0 and idPath=(Select idPath from path where strPath="plugin://plugin.video.series/") and strFilename like "plugin://plugin.video.series/?action=play&id=' + serie_id + '%"' )
 if 83 - 83: IIII * IIII
 for IIIi1I111iI1 in oo0OO0Oo0 :
  o0o [ IIIi1I111iI1 [ 2 ] ] = IIIi1I111iI1
  if 63 - 63: OOO / o0 - i1iI1 - IIII - O0ooo0o0OOO
  if 22 - 22: IIII / oOO + OO00o00O + oOO / IIII - oooO0OO
  if 31 - 31: OOO
  if 11 - 11: oooO0OO
  if 10 - 10: oooOoO - OOO / o0 / OO00o00O
  if 75 - 75: oooOoO . IIII
  if 30 - 30: IiII1IiI % OOO . I1
  if 68 - 68: IIoooO0ooO0oo % i1iI1 . ii1I1ii1IiIi1
 OOOoOOOOo0o0o = { }
 OO00O0OOO0o = [ ]
 if len ( rows ) > 0 :
  for ooOOOO0o in rows :
   ooo0ooOoO0Oo = [ ]
   serie_id = ooOOOO0o [ 0 ]
   ii111I1i = ooOOOO0o [ 1 ]
   ooOOO00oO = ooOOOO0o [ 2 ]
   iii1i = ooOOOO0o [ 6 ]
   if ooOOOO0o [ 7 ] :
    OOo = ooOOOO0o [ 7 ]
   else :
    OOo = None
   ooO0O0o0oOOO = ooOOOO0o [ 8 ]
   o0000O = ooOOOO0o [ 9 ]
   oOO0O0 = ooOOOO0o [ 10 ]
   O0oOooOoOo0 = ooOOOO0o [ 11 ]
   oOO00OoO0oo = ooOOOO0o [ 12 ]
   if ooO0O0o0oOOO :
    oO0oooOO00OOo = ooO0O0o0oOOO
   else :
    oO0oooOO00OOo = str ( ii111I1i ) + 'x' + ooOOO00oO
    ooO0O0o0oOOO = str ( ii111I1i ) + 'x' + ooOOO00oO
   if not O0oOooOoOo0 :
    O0oOooOoOo0 = carat
   if not oOO00OoO0oo :
    oOO00OoO0oo = poste
   III1IiiI = ii1II ( nombre = ooO0O0o0oOOO , caratula = O0oOooOoOo0 ,
 poster = oOO00OoO0oo , video = { 'title' : ooO0O0o0oOOO , 'year' : o0000O , 'plot' : oOO0O0 } , isPlayable = True )
   if 77 - 77: iiIIi1i1Iii . ii1I1ii1IiIi1 / oooO0OO * oooOoO
   if isinstance ( oO0oooOO00OOo , unicode ) :
    oO0oooOO00OOo = oO0oooOO00OOo . encode ( 'utf-8' )
   Iii1iiiI1iIII = '{0}?{1}=play&id={2}&lin={3}&tit={4}' . format ( o0O0o , I111i11I1I , serie_id , iii1i ,
 base64 . urlsafe_b64encode (
 unicode ( oO0oooOO00OOo , Ooo ) . encode (
 Ooo ) ) )
   if Iii1iiiI1iIII in o0o :
    if o0o [ Iii1iiiI1iIII ] [ 3 ] > 0 :
     ooo0ooOoO0Oo . append ( iiI1111IIiiI ( o0o [ Iii1iiiI1iIII ] [ 0 ] , o0o [ Iii1iiiI1iIII ] [ 1 ] , o0o [ Iii1iiiI1iIII ] [ 2 ] , False ) )
    else :
     ooo0ooOoO0Oo . append ( iiI1111IIiiI ( o0o [ Iii1iiiI1iIII ] [ 0 ] , o0o [ Iii1iiiI1iIII ] [ 1 ] , o0o [ Iii1iiiI1iIII ] [ 2 ] , True ) )
    if o0o [ Iii1iiiI1iIII ] [ 4 ] :
     if not str ( serie_id ) + '-' + str ( ii111I1i ) + '-' + ooOOO00oO in OOOoOOOOo0o0o and not OOo :
      OOOoOOOOo0o0o [ str ( serie_id ) + '-' + str ( ii111I1i ) + '-' + ooOOO00oO ] = str ( o0o [ Iii1iiiI1iIII ] [ 4 ] )
   else :
    ooo0ooOoO0Oo . append ( iiI1111IIiiI ( 0 , O0OOO , Iii1iiiI1iIII , True ) )
    if 23 - 23: IiII1IiI + II % ii1I1ii1IiIi1 % I1 . o00oO0oo0O0O0
   ooo0ooOoO0Oo . append ( IIIII ( id = '%s-%s-%s' % ( str ( serie_id ) , str ( ii111I1i ) , ooOOO00oO ) , nombre = ooO0O0o0oOOO , url = Iii1iiiI1iIII , caratula = O0oOooOoOo0 , poster = oOO00OoO0oo ) )
   if 25 - 25: oOO
   III1IiiI . addContextMenuItems ( ooo0ooOoO0Oo )
   if 82 - 82: o0O0ooO0oo0o . OO00o00O - oOO % IiII1IiI
   if 80 - 80: oooOoO * iI11 + II - OOO + o00oO0oo0O0O0 % Ii
   if 81 - 81: oooO0OO . IiII1IiI . IIoooO0ooO0oo . o0O0ooO0oo0o - OOO
   if 21 - 21: i1iI1 / ii1I1ii1IiIi1 + I1 / oOO - oOO + IiII1IiI
   if 16 - 16: iI11
   oOOo = False
   OO00O0OOO0o . append ( ( Iii1iiiI1iIII , III1IiiI , oOOo ) )
  try :
   if len ( OOOoOOOOo0o0o ) > 0 :
    for oO , ii1iI111iIi1 in OOOoOOOOo0o0o . iteritems ( ) :
     seriecrypt . updateQuality ( o0oo0O , oO , ii1iI111iIi1 )
  except :
   pass
   if 87 - 87: i1iI1 . oooO0OO - IIoooO0ooO0oo - OOoOoO0o0o0OO * OOO
 else :
  if 60 - 60: OO00o00O - IIoooO0ooO0oo . o00oO0oo0O0O0 . II . O0ooo0o0OOO * o0O0ooO0oo0o
  OO00O0OOO0o . append ( ( '{0}' . format ( o0O0o ) , ii1II ( nombre = 'No hay elementos' , caratula = '' ) , True ) )
 xbmcplugin . addDirectoryItems ( oo0oO0OO0OO0O , OO00O0OOO0o , len ( OO00O0OOO0o ) )
 xbmcplugin . endOfDirectory ( oo0oO0OO0OO0O )
 if 85 - 85: II
 if 57 - 57: ii1I1ii1IiIi1 - OOoOoO0o0o0OO / OOO * oOO % IIII
def oooO00o0oO ( rows , category = None , lang = None , date = None , page = None , params = { } ) :
 OO00O0OOO0o = [ ]
 try :
  xbmcplugin . setContent ( oo0oO0OO0OO0O , "tvshows" )
  xbmc . executebuiltin ( "Container.SetViewMode(515)" )
 except :
  pass
  if 42 - 42: oOO . OOO / IiII1IiI % IIoooO0ooO0oo
 for ooOOOO0o in rows :
  o0OOoo0 = ooOOOO0o [ 0 ]
  i1IiI = ooOOOO0o [ 1 ]
  IIi = ooOOOO0o [ 2 ]
  ii11ii1iIII1I = ''
  i1iI1oOoOo0O0 = ''
  O0OOO0oo = ''
  if category and ooOOOO0o [ 10 ] != 'General' :
   i1iI1oOoOo0O0 = '[COLOR silver](%s) [/COLOR]' % ( ooOOOO0o [ 10 ] )
  if lang and ooOOOO0o [ 9 ] != 'Castellano' :
   ii11ii1iIII1I = '[COLOR silver](%s) [/COLOR]' % ( ooOOOO0o [ 9 ] )
  if date :
   O0OOO0oo = '[COLOR silver](%s)[/COLOR]' % str ( ooOOOO0o [ 11 ] )
  if IIi and ooOOOO0o [ 8 ] == 'N' :
   o0I1 = seriecrypt . iiIIiiII1 ( IIi )
   if o0I1 == 'yt' :
    oO0Oo000O = seriecrypt . ooOO ( IIi )
    for O0OooO0 in xrange ( 0 , len ( oO0Oo000O ) ) :
     if len ( oO0Oo000O ) <= 1 :
      o00O = ''
     else :
      o00O = " (" + str ( O0OooO0 + 1 ) + ")"
     oOOoO00Oo = '[COLOR gold]%s [/COLOR] %s %s %s' % ( i1IiI + o00O , ii11ii1iIII1I , i1iI1oOoOo0O0 , O0OOO0oo )
     III1IiiI = ii1II ( nombre = oOOoO00Oo , caratula = ooOOOO0o [ 6 ] ,
 poster = ooOOOO0o [ 7 ] , video = { 'title' : ooOOOO0o [ 3 ] , 'year' : ooOOOO0o [ 4 ] , 'plot' : ooOOOO0o [ 5 ] } )
     III1IiiI . addContextMenuItems ( [ IIIII ( id = '%s-v' % str ( o0OOoo0 ) , nombre = oOOoO00Oo , url = oO0Oo000O [ O0OooO0 ] , caratula = ooOOOO0o [ 6 ] , poster = ooOOOO0o [ 7 ] ) ] )
     OO00O0OOO0o . append ( ( oO0Oo000O [ O0OooO0 ] , III1IiiI , True ) )
   else :
    oOOoO00Oo = '[COLOR gold]%s [/COLOR] %s %s %s' % ( i1IiI , ii11ii1iIII1I , i1iI1oOoOo0O0 , O0OOO0oo )
    III1IiiI = ii1II ( nombre = oOOoO00Oo , caratula = ooOOOO0o [ 6 ] ,
 poster = ooOOOO0o [ 7 ] , video = { 'title' : ooOOOO0o [ 3 ] , 'year' : ooOOOO0o [ 4 ] , 'plot' : ooOOOO0o [ 5 ] } )
    Iii1iiiI1iIII = '{0}?{1}=view_serie&serie_id={2}' . format ( o0O0o , I111i11I1I , o0OOoo0 )
    III1IiiI . addContextMenuItems ( [ IIIII ( id = '%s-v' % str ( o0OOoo0 ) , nombre = oOOoO00Oo , url = Iii1iiiI1iIII , caratula = ooOOOO0o [ 6 ] , poster = ooOOOO0o [ 7 ] ) ] )
    OO00O0OOO0o . append ( ( Iii1iiiI1iIII , III1IiiI , True ) )
  else :
   oOOoO00Oo = '[COLOR gold]%s [/COLOR] %s %s %s' % ( i1IiI , ii11ii1iIII1I , i1iI1oOoOo0O0 , O0OOO0oo )
   III1IiiI = ii1II ( nombre = oOOoO00Oo , caratula = ooOOOO0o [ 6 ] ,
 poster = ooOOOO0o [ 7 ] , video = { 'title' : ooOOOO0o [ 3 ] , 'year' : ooOOOO0o [ 4 ] , 'plot' : ooOOOO0o [ 5 ] } )
   Iii1iiiI1iIII = '{0}?{1}=serie&serie_id={2}' . format ( o0O0o , I111i11I1I , o0OOoo0 )
   III1IiiI . addContextMenuItems ( [ IIIII ( id = str ( o0OOoo0 ) , nombre = oOOoO00Oo , url = Iii1iiiI1iIII , caratula = ooOOOO0o [ 6 ] , poster = ooOOOO0o [ 7 ] ) ] )
   OO00O0OOO0o . append ( ( Iii1iiiI1iIII , III1IiiI , True ) )
   if 67 - 67: OOoOoO0o0o0OO % O0ooo0o0OOO
 if len ( rows ) >= OoooO0O :
  if page and 'action' in params :
   try :
    i1IiI = i1IiI . encode ( 'utf-8' , 'ignore' )
   except ( UnicodeEncodeError , UnicodeDecodeError ) :
    pass
   page = page + 1
   III1IiiI = ii1II ( nombre = 'Página Siguiente (%s) >' % str ( page ) )
   Iii1iiiI1iIII = '{0}?{1}={2}&c_page={3}&alfa={4}&page={5}' . format ( o0O0o , I111i11I1I , params [ 'action' ] , str ( page ) , base64 . urlsafe_b64encode ( "alfa >= '" + rows [ len ( rows ) - 1 ] [ 12 ] + "'" ) , base64 . urlsafe_b64encode ( "nombre > '" + i1IiI + "'" ) )
   OO00O0OOO0o . append ( ( Iii1iiiI1iIII , III1IiiI , True ) )
 xbmcplugin . addDirectoryItems ( oo0oO0OO0OO0O , OO00O0OOO0o , len ( OO00O0OOO0o ) )
 xbmcplugin . endOfDirectory ( oo0oO0OO0OO0O )
 if 92 - 92: oOO + IiII1IiI - oooO0OO % OO00o00O * o0
 if 89 - 89: O0ooo0o0OOO
 if 85 - 85: O0ooo0o0OOO
def o0Oo00O0OOoo ( serie_id ) :
 oo = sqlite3 . connect ( o0oo0O )
 OO0O000oooOOO = oo . cursor ( )
 OO0O000oooOOO . execute (
 "SELECT series.serie_id, series_temp.temp_id, series_temp.link, series.nombre, series.anno, series.sinopsis, series.caratula, series.poster, series_temp.sinopsis, series_temp.caratula, series_temp.poster, series_temp.has_episodes, series_temp.nombre, series.link, series.quality, series_temp.quality FROM series LEFT JOIN series_temp ON series.serie_id = series_temp.serie_id where series.serie_id=? ORDER BY series_temp.temp_id" ,
 ( serie_id , ) )
 iiii111 = OO0O000oooOOO . fetchall ( )
 oo . close ( )
 OO00O0OOO0o = [ ]
 OOO0O0OO0OO0O = False
 if len ( iiii111 ) > 0 :
  if iiii111 [ 0 ] [ 13 ] :
   o0I1 = seriecrypt . iiIIiiII1 ( iiii111 [ 0 ] [ 13 ] )
   if o0I1 == 'yt' :
    oO0Oo000O = seriecrypt . ooOO ( iiii111 [ 0 ] [ 13 ] )
    for O0OooO0 in xrange ( 0 , len ( oO0Oo000O ) ) :
     if len ( oO0Oo000O ) <= 1 :
      o00O = ''
     else :
      o00O = " (" + str ( O0OooO0 + 1 ) + ")"
     oOOoO00Oo = '[COLOR gold]Lista de Capítulos %s [/COLOR]' % o00O
     III1IiiI = ii1II ( nombre = oOOoO00Oo , caratula = iiii111 [ 0 ] [ 6 ] ,
 poster = iiii111 [ 0 ] [ 7 ] , video = { 'title' : iiii111 [ 0 ] [ 3 ] , 'year' : iiii111 [ 0 ] [ 4 ] , 'plot' : iiii111 [ 0 ] [ 5 ] } )
     III1IiiI . addContextMenuItems ( [ IIIII ( id = '%s-v' % str ( serie_id ) , nombre = oOOoO00Oo , url = oO0Oo000O [ O0OooO0 ] , caratula = iiii111 [ 0 ] [ 6 ] , poster = iiii111 [ 0 ] [ 7 ] ) ] )
     OO00O0OOO0o . append ( ( oO0Oo000O [ O0OooO0 ] , III1IiiI , True ) )
   else :
    oOOoO00Oo = '[COLOR gold]Lista de Capítulos [/COLOR]'
    III1IiiI = ii1II ( nombre = oOOoO00Oo , caratula = iiii111 [ 0 ] [ 6 ] ,
 poster = iiii111 [ 0 ] [ 7 ] ,
 video = { 'title' : iiii111 [ 0 ] [ 3 ] , 'year' : iiii111 [ 0 ] [ 4 ] , 'plot' : 'Todos los episodios de la serie' } )
    Iii1iiiI1iIII = '{0}?{1}=view_serie&serie_id={2}' . format ( o0O0o , I111i11I1I , serie_id )
    III1IiiI . addContextMenuItems ( [ IIIII ( id = '%s-v' % str ( serie_id ) , nombre = oOOoO00Oo , url = Iii1iiiI1iIII , caratula = iiii111 [ 0 ] [ 6 ] , poster = iiii111 [ 0 ] [ 7 ] ) ] )
    if 69 - 69: oooOoO / IiII1IiI * I1 - I1 . ii1I1ii1IiIi1 - o00oO0oo0O0O0
    if 40 - 40: IIII * o0 - oooO0OO . oooO0OO
    if 15 - 15: o0 + O0ooo0o0OOO . o00oO0oo0O0O0 * iiIIi1i1Iii + oooOoO % IIII
    OO00O0OOO0o . append ( ( Iii1iiiI1iIII , III1IiiI , True ) )
 for ooOOOO0o in iiii111 :
  OOO0O0OO0OO0O = False
  o0OOoo0 = ooOOOO0o [ 0 ]
  oo0O0OooO = ooOOOO0o [ 1 ]
  if 56 - 56: o0O0ooO0oo0o % o0O0ooO0oo0o . IiII1IiI * OO00o00O * oooO0OO + iI11
  if ooOOOO0o [ 12 ] :
   i1i1I = ooOOOO0o [ 12 ]
  else :
   i1i1I = '%s %s' % ( 'Temporada' , oo0O0OooO )
  iii = i1I ( ooOOOO0o [ 5 ] , ooOOOO0o [ 6 ] , ooOOOO0o [ 7 ] , ooOOOO0o [ 8 ] , ooOOOO0o [ 9 ] , ooOOOO0o [ 10 ] )
  if ooOOOO0o [ 2 ] :
   oOOo = True
   OOO0O0OO0OO0O = True
   o0I1 = seriecrypt . iiIIiiII1 ( ooOOOO0o [ 2 ] )
   if o0I1 == 'yt' :
    oO0Oo000O = seriecrypt . ooOO ( ooOOOO0o [ 2 ] )
    for O0OooO0 in xrange ( 0 , len ( oO0Oo000O ) ) :
     if len ( oO0Oo000O ) <= 1 :
      o00O = ''
     else :
      o00O = " (" + str ( O0OooO0 + 1 ) + ")"
     oOOoO00Oo = '[COLOR gold]%s[/COLOR]' % ( i1i1I + o00O )
     III1IiiI = ii1II ( nombre = oOOoO00Oo , caratula = iii [ 1 ] ,
 poster = iii [ 2 ] ,
 video = { 'title' : ooOOOO0o [ 3 ] , 'year' : ooOOOO0o [ 4 ] , 'plot' : iii [ 0 ] } )
     III1IiiI . addContextMenuItems ( [ IIIII ( id = '%s%s-v' % ( str ( o0OOoo0 ) , str ( oo0O0OooO ) ) , nombre = oOOoO00Oo , url = oO0Oo000O [ O0OooO0 ] , caratula = iii [ 1 ] , poster = iii [ 2 ] ) ] )
     OO00O0OOO0o . append ( ( oO0Oo000O [ O0OooO0 ] , III1IiiI , True ) )
   else :
    oOOoO00Oo = '[COLOR gold]%s[/COLOR]' % i1i1I
    III1IiiI = ii1II ( nombre = oOOoO00Oo , caratula = iii [ 1 ] ,
 poster = iii [ 2 ] ,
 video = { 'title' : ooOOOO0o [ 3 ] , 'year' : ooOOOO0o [ 4 ] , 'plot' : iii [ 0 ] } )
    Iii1iiiI1iIII = '{0}?{1}=view_temp&serie_id={2}&temp_id={3}' . format ( o0O0o , I111i11I1I , o0OOoo0 , oo0O0OooO )
    III1IiiI . addContextMenuItems ( [ IIIII ( id = '%s%s-v' % ( str ( o0OOoo0 ) , str ( oo0O0OooO ) ) , nombre = oOOoO00Oo , url = Iii1iiiI1iIII , caratula = iii [ 1 ] , poster = iii [ 2 ] ) ] )
    if 25 - 25: o00oO0oo0O0O0 . o0
    if 28 - 28: OOO . OO00o00O / iiIIi1i1Iii + iI11 * oOO + oooOoO
    if 47 - 47: o00oO0oo0O0O0 + o0O0ooO0oo0o - IIoooO0ooO0oo . i1iI1 / iI11
    OO00O0OOO0o . append ( ( Iii1iiiI1iIII , III1IiiI , oOOo ) )
  if ooOOOO0o [ 11 ] == 'Y' :
   oOOoO00Oo = '[COLOR gold]%s [/COLOR]' % i1i1I
   if ooOOOO0o [ 2 ] :
    oOOoO00Oo = '%s [COLOR white](Alternativo)[/COLOR]' % ( oOOoO00Oo )
   III1IiiI = ii1II ( nombre = oOOoO00Oo , caratula = iii [ 1 ] ,
 poster = iii [ 2 ] ,
 video = { 'title' : ooOOOO0o [ 3 ] , 'year' : ooOOOO0o [ 4 ] , 'plot' : iii [ 0 ] } )
   Iii1iiiI1iIII = '{0}?{1}=list_temp&serie_id={2}&temp_id={3}&caratula={4}&poster={5}' . format ( o0O0o , I111i11I1I , o0OOoo0 , oo0O0OooO ,
 iii [ 1 ] , iii [ 2 ] )
   III1IiiI . addContextMenuItems ( [ IIIII ( id = '%s%s' % ( str ( o0OOoo0 ) , str ( oo0O0OooO ) ) , nombre = oOOoO00Oo , url = Iii1iiiI1iIII , caratula = iii [ 1 ] , poster = iii [ 2 ] ) ] )
   if 51 - 51: o00oO0oo0O0O0 - o0O0ooO0oo0o / o0O0ooO0oo0o * OOoOoO0o0o0OO + o0O0ooO0oo0o
   if 19 - 19: oooO0OO
   if 53 - 53: o0O0ooO0oo0o + IIII / II - oooO0OO % ii1I1ii1IiIi1
   if 22 - 22: IIII * ii1I1ii1IiIi1 / o00oO0oo0O0O0 - II
   oOOo = True
   OOO0O0OO0OO0O = True
   OO00O0OOO0o . append ( ( Iii1iiiI1iIII , III1IiiI , oOOo ) )
 try :
  xbmcplugin . setContent ( oo0oO0OO0OO0O , "tvshows" )
  xbmc . executebuiltin ( "Container.SetViewMode(515)" )
 except :
  pass
 if OOO0O0OO0OO0O :
  xbmcplugin . addDirectoryItems ( oo0oO0OO0OO0O , OO00O0OOO0o , len ( OO00O0OOO0o ) )
  xbmcplugin . endOfDirectory ( oo0oO0OO0OO0O )
 else :
  xbmc . log ( "[addon.Series-%s]: No info found for serie %s " % ( o0O0oO0 , serie_id ) )
  if 59 - 59: o00oO0oo0O0O0
  if 58 - 58: ii1I1ii1IiIi1 * oooOoO % iiIIi1i1Iii . IIoooO0ooO0oo * o00oO0oo0O0O0 / OO00o00O
  if 25 - 25: oooO0OO + Ii - iiIIi1i1Iii . Ii
def i1IiIi1ii1 ( serie_id , temp_id , caratula , poster ) :
 iiii111 = i11II1IIiii1i ( "capitulos" , [ "serie_id" , "temp_id" , "capitulo_id" , "''" , "''" , "''" , "link" , "quality" ,
 "nombre" , "anno" , "sinopsis" , "caratula" , "poster" ] , [ "serie_id" , "temp_id" ] , [ serie_id , temp_id ] , [ 'capitulos.nombre' , 'capitulos.capitulo_id' ] )
 I11IIi11 ( iiii111 , serie_id , caratula , poster )
 if 45 - 45: O0ooo0o0OOO + o0O0ooO0oo0o
 if 83 - 83: OO00o00O % OO00o00O - O0ooo0o0OOO - OO00o00O + OO00o00O + i1iI1
 if 29 - 29: IiII1IiI * o0 * IiII1IiI % I1 + OOO . o00oO0oo0O0O0
def O0OoOO ( serie_id , temp_id ) :
 oo = sqlite3 . connect ( o0oo0O )
 OO0O000oooOOO = oo . cursor ( )
 OO0O000oooOOO . execute (
 "SELECT series.serie_id, series_temp.temp_id, '', '', '', '', series_temp.link, series_temp.quality, series.nombre, series_temp.anno, series.sinopsis, series.caratula, series.poster, series_temp.sinopsis, series_temp.caratula, series_temp.poster FROM series INNER JOIN series_temp ON series.serie_id=series_temp.serie_id where series_temp.serie_id=? AND series_temp.temp_id=?" ,
 ( serie_id , temp_id , ) )
 iiii111 = OO0O000oooOOO . fetchall ( )
 oo . close ( )
 iii = i1I ( iiii111 [ 0 ] [ 10 ] , iiii111 [ 0 ] [ 11 ] , iiii111 [ 0 ] [ 12 ] , iiii111 [ 0 ] [ 13 ] , iiii111 [ 0 ] [ 14 ] , iiii111 [ 0 ] [ 15 ] )
 O0 = seriecrypt . Oooo00ooo ( iiii111 [ 0 ] [ 6 ] , o0oo0O , serie_id , temp_id )
 iI1I = [ None ] * len ( O0 )
 for O0OooO0 in xrange ( 0 , len ( O0 ) ) :
  iI1I [ O0OooO0 ] = list ( iiii111 [ 0 ] [ : len ( iiii111 [ 0 ] ) - 3 ] )
  iI1I [ O0OooO0 ] [ 10 ] = iii [ 0 ]
  iI1I [ O0OooO0 ] [ 11 ] = iii [ 1 ]
  iI1I [ O0OooO0 ] [ 12 ] = iii [ 2 ]
  iI1I [ O0OooO0 ] [ 6 ] = O0 [ O0OooO0 ] [ 1 ]
  iI1I [ O0OooO0 ] [ 8 ] = O0 [ O0OooO0 ] [ 0 ]
  iI1I [ O0OooO0 ] [ 10 ] = ''
 I11IIi11 ( iI1I , serie_id )
 if 97 - 97: Ii . o00oO0oo0O0O0 * IIII . OOoOoO0o0o0OO
 if 47 - 47: I1 . O0ooo0o0OOO - Ii
 if 83 - 83: oooOoO . iiIIi1i1Iii - oooO0OO
def i1Iii11i1iiI ( serie_id ) :
 iiii111 = i11II1IIiii1i ( "series" , [ "serie_id" , "''" , "''" , "''" , "''" , "''" , "link" , "quality" , "nombre" , "anno" , "sinopsis" , "caratula" , "poster"
 ] , [ "serie_id" ] , [ serie_id ] , [ 'serie_id' ] )
 if 75 - 75: OOoOoO0o0o0OO % oooOoO . oOO
 if 13 - 13: ii1I1ii1IiIi1 + iI11 % o0
 O0 = seriecrypt . Oooo00ooo ( iiii111 [ 0 ] [ 6 ] , o0oo0O , serie_id )
 iI1I = [ None ] * len ( O0 )
 for O0OooO0 in xrange ( 0 , len ( O0 ) ) :
  iI1I [ O0OooO0 ] = list ( iiii111 [ 0 ] [ : ] )
  iI1I [ O0OooO0 ] [ 6 ] = O0 [ O0OooO0 ] [ 1 ]
  iI1I [ O0OooO0 ] [ 8 ] = O0 [ O0OooO0 ] [ 0 ]
  iI1I [ O0OooO0 ] [ 10 ] = ''
 I11IIi11 ( iI1I , serie_id )
 if 14 - 14: iI11 + OOoOoO0o0o0OO - o0 - o00oO0oo0O0O0
 if 77 - 77: iI11 % IIoooO0ooO0oo * oooO0OO * IIII - II - OOoOoO0o0o0OO
def i11II1IIiii1i ( table , values , ids , ids_value , order ) :
 OO0oO = sqlite3 . connect ( o0oo0O )
 OO0O000oooOOO = OO0oO . cursor ( )
 OO0O000oooOOO . execute ( "SELECT " + "," . join ( values ) + "," + "," . join ( ids ) + " FROM " + table + " WHERE " + ( " = ? and " . join ( ids ) + "=?" ) + "order by " + "," . join ( order ) + " asc" , ids_value )
 iiii111 = OO0O000oooOOO . fetchall ( )
 OO0oO . close ( )
 return iiii111
 if 62 - 62: IIII
 if 99 - 99: OOO - iI11 % oooO0OO % OO00o00O / i1iI1 * I1
def ii1 ( lin , tit , id ) :
 seriecrypt . IIIII ( lin , tit , o0oo0O , id )
 if 7 - 7: o0O0ooO0oo0o / o0
 if 6 - 6: I1 / OOoOoO0o0o0OO % oooO0OO / o0
def oO0o ( paramstring ) :
 iI = dict ( parse_qsl ( paramstring ) )
 if iI :
  if iI [ I111i11I1I ] == 'series' :
   iIiIi ( '==' , 'general' , iI )
  elif iI [ I111i11I1I ] == 'seriesInf' :
   iIiIi ( '==' , 'infantil' , iI )
  elif iI [ I111i11I1I ] == 'retro' :
   iIiIi ( '==' , 'retro' , iI )
  elif iI [ I111i11I1I ] == 'searchSerie' :
   OooO0OOo0 ( )
  elif iI [ I111i11I1I ] == 'seriesByLang' :
   if 'lang' in iI :
    Oo000ooO0OO ( iI [ 'lang' ] )
   else :
    Oo000ooO0OO ( )
  elif iI [ I111i11I1I ] == 'seriesByAZ' :
   if 'letra' in iI :
    o00OO00 ( iI [ 'letra' ] )
   else :
    o00OO00 ( )
  elif iI [ I111i11I1I ] == 'masvisto' :
   Oo0oOOoOOO ( )
  elif iI [ I111i11I1I ] == 'ultimas' :
   IiiI1I1I1iIiI ( )
  elif iI [ I111i11I1I ] == 'serie' :
   o0Oo00O0OOoo ( iI [ 'serie_id' ] )
  elif iI [ I111i11I1I ] == 'addfav' :
   oOo00o00o0 ( iI )
  elif iI [ I111i11I1I ] == 'rmfav' :
   iii1iIII1111I ( iI )
  elif iI [ I111i11I1I ] == 'listfav' :
   O000OOo0oo0 ( )
  elif iI [ I111i11I1I ] == 'to_unwatch' :
   ii11iIIi1I ( iI [ 'idFile' ] , iI [ 'idPath' ] , iI [ 'fileName' ] , False )
  elif iI [ I111i11I1I ] == 'to_watch' :
   ii11iIIi1I ( iI [ 'idFile' ] , iI [ 'idPath' ] , iI [ 'fileName' ] , True )
  elif iI [ I111i11I1I ] == 'view_serie' :
   i1Iii11i1iiI ( iI [ 'serie_id' ] )
  elif iI [ I111i11I1I ] == 'view_temp' :
   O0OoOO ( iI [ 'serie_id' ] , iI [ 'temp_id' ] )
  elif iI [ I111i11I1I ] == 'list_temp' :
   i1IiIi1ii1 ( iI [ 'serie_id' ] , iI [ 'temp_id' ] , iI [ 'caratula' ] , iI [ 'poster' ] )
  elif iI [ I111i11I1I ] == 'play' :
   ii1 ( iI [ 'lin' ] , iI [ 'tit' ] , iI [ 'id' ] )
 else :
  O00ooo00O ( )
  if 46 - 46: iiIIi1i1Iii . iI11 / o0O0ooO0oo0o % oooOoO * IiII1IiI . Ii
  if 25 - 25: i1iI1 % oooOoO + I1 % o00oO0oo0O0O0 % o0 + o0
if __name__ == '__main__' :
 oO0o ( sys . argv [ 2 ] [ 1 : ] )
 if 45 - 45: Ii * IIoooO0ooO0oo * o0O0ooO0oo0o % iiIIi1i1Iii
 if 83 - 83: oooO0OO / OOO . Ii . iiIIi1i1Iii % II / oooO0OO
 if 94 - 94: o00oO0oo0O0O0 * o00oO0oo0O0O0 / IIII + ii1I1ii1IiIi1 + I1 * OOO
 if 79 - 79: i1iI1 / Ii * O0ooo0o0OOO . o0 % o0O0ooO0oo0o + o0
# 807cb1bfffb234dace3f930f571a9039d76f4cf9
')
import base64;exec base64.b64decode('# -*- coding: utf-8 -*-
import sys
import re
import os
import xbmcgui
import xbmc
import HTMLParser
import xbmcplugin
import urllib
import urllib2
import sqlite3
import base64
import zlib
from urllib2 import HTTPError
from urllib2 import URLError
import traceback
if 97 - 97: OOoOoO0o0o0OO + IIII . Ii % oOO
if 1 - 1: II - iiIIi1i1Iii - I1 - IIoooO0ooO0oo * OOO
if 5 - 5: i1iI1 + o00oO0oo0O0O0 - ii1I1ii1IiIi1 % oooOoO - IiII1IiI
def oooo00OoOoOo0 ( text ) :
 if 86 - 86: o0 + iI11
 i1III11 = base64 . urlsafe_b64decode ( 'N1NlMTBnQUllLVQwX2E=' )
 try :
  II1iIiiI1I = base64 . urlsafe_b64decode ( str ( text ) )
  OoOO = [ ]
  for i1i1I11i in xrange ( len ( II1iIiiI1I ) ) :
   ii1IIII1I11 = i1III11 [ i1i1I11i % len ( i1III11 ) ]
   OoO0 = chr ( ord ( II1iIiiI1I [ i1i1I11i ] ) - ord ( ii1IIII1I11 ) % 256 )
   OoOO . append ( OoO0 )
  iiiiiIII1111 = '' . join ( OoOO )
  return iiiiiIII1111
 except TypeError , O0000Ooo0o0 :
  return text
  if 34 - 34: OoO0oooOoO0 . o0O0ooOo0 - IiooO0o0000
  if 51 - 51: I1I1i1i % ii1I1ii1IiIi1 . oOO + IiooO0o0000 - Ii - oooOoO
  if 98 - 98: OOoOoO0o0o0OO
  if 27 - 27: IIoooO0ooO0oo . II
  if 12 - 12: ii1I1ii1IiIi1 + o0 . iI11 % IiooO0o0000 * iiIIi1i1Iii
  if 98 - 98: I1I1i1i + OOO - iiIIi1i1Iii . I1I1i1i % I1 . o0
def iI1iI1i11II ( ) :
 return 'eJzLKCkpsNLXL8-sSixKSU4syU_M0UstrgRi_eDUoszUYgDT2Qx9'
 if 29 - 29: iI11 * Ii % i1iI1 + o0 / iiIIi1i1Iii
 if 42 - 42: II . oooOoO . o0 * I1I1i1i
def o0O00000o0 ( bas ) :
 ooo0Oo00o = sqlite3 . connect ( bas )
 IiO0oOoOOooooO = ooo0Oo00o . cursor ( )
 oooO0 = ''
 if 36 - 36: o0 / OoO0oooOoO0 % IIII + IIoooO0ooO0oo + IiooO0o0000 + ii1I1ii1IiIi1
 try :
  if 28 - 28: iiIIi1i1Iii / IiII1IiI % I1 % OOO - IiooO0o0000
  IiO0oOoOOooooO . execute ( base64 . urlsafe_b64decode ( 'U2VsZWN0IGxvYyBmcm9tIHZlcnNpb24=' ) )
  II1 = IiO0oOoOOooooO . fetchone ( )
  oooO0 = II1 [ 0 ]
  ooo0Oo00o . close ( )
 except :
  try :
   ooo0Oo00o . close ( )
  except :
   pass
   if 63 - 63: OOO % o0O0ooOo0 - i1iI1
  try :
   os . remove ( bas )
  except :
   pass
 return str ( oooO0 . strip ( ) )
 if 36 - 36: I1I1i1i / o0 + oOO / o0O0ooOo0 + Ii + IIII
 if 59 - 59: IiII1IiI / o00oO0oo0O0O0 + IiII1IiI + OoO0oooOoO0
def oooO0oo0 ( url , post = None ) :
 oO00o = { 'User-Agent' : 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-GB; rv:1.8.1.14) Gecko/20080404 Firefox/2.0.0.14' }
 oo0O0 = urllib2 . urlopen
 Ii11 = urllib2 . Request
 I11Iii11i1Ii1 = Ii11 ( url , post , oO00o )
 iiII = oo0O0 ( I11Iii11i1Ii1 )
 oooO = iiII . read ( )
 return oooO
 if 1 - 1: i1iI1 + o0 - ii1I1ii1IiIi1
def OOOO00Ooo ( bd , id , val ) :
 try :
  oooO0 = zlib . decompress ( base64 . urlsafe_b64decode ( o0O00000o0 ( bd ) ) )
  if 86 - 86: o0
  iii1i1iI1 = ( base64 . urlsafe_b64decode ( 'JXMvQmFzZURhdG9zL3F1YWxpdHkucGhwP2lkPSVzJnZhbD0lcw==' ) ) % (
 oooO0 , id , str ( val ) )
  oooO0oo0 ( iii1i1iI1 )
  OOo0 = id . split ( '-' )
  if 81 - 81: I1I1i1i . o0O0ooOo0 + IIII * oOO
  ooo0Oo00o = sqlite3 . connect ( bd )
  IiO0oOoOOooooO = ooo0Oo00o . cursor ( )
  if OOo0 [ 2 ] :
   if 53 - 53: OOO
   IiO0oOoOOooooO . execute ( base64 . urlsafe_b64decode (
 'VVBEQVRFIGNhcGl0dWxvcyBTRVQgcXVhbGl0eT0_IFdIRVJFIHNlcmllX2lkID0gPyBBTkQgdGVtcF9pZCA9ID8gQU5EIGNhcGl0dWxvX2lkID0gPw==' ) ,
 ( str ( val ) , int ( OOo0 [ 0 ] ) , int ( OOo0 [ 1 ] ) , OOo0 [ 2 ] , ) )
  elif OOo0 [ 1 ] :
   if 36 - 36: o0
   IiO0oOoOOooooO . execute ( base64 . urlsafe_b64decode ( 'VVBEQVRFIHNlcmllc190ZW1wIFNFVCBxdWFsaXR5PT8gV0hFUkUgc2VyaWVfaWQgPSA_IEFORCB0ZW1wX2lkID0gPw==' ) ,
 ( str ( val ) , int ( OOo0 [ 0 ] ) , int ( OOo0 [ 1 ] ) , ) )
  elif OOo0 [ 0 ] :
   if 16 - 16: o0
   IiO0oOoOOooooO . execute ( base64 . urlsafe_b64decode ( 'VVBEQVRFIHNlcmllcyBTRVQgcXVhbGl0eT0_IFdIRVJFIHNlcmllX2lkID0gPw==' ) ,
 ( str ( val ) , int ( OOo0 [ 0 ] ) , ) )
  ooo0Oo00o . commit ( )
  ooo0Oo00o . close ( )
 except Exception as O0000Ooo0o0 :
  pass
  if 74 - 74: OOO * IIoooO0ooO0oo
  if 20 - 20: iiIIi1i1Iii
def Oooo00ooo ( link , bd , id , temp_id = 0 ) :
 oOo = [ ]
 ii1I1Iii = { 'User-agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:19.0) Gecko/20100101 Firefox/19.0' }
 iii1i1iI1 = oooo00OoOoOo0 ( str ( link ) )
 ii1I1Iii [ 'referer' ] = '/' . join ( iii1i1iI1 . split ( '/' ) [ : 4 ] )
 ii1I1Iii [ 'connection' ] = 'keep-alive'
 I11Iii11i1Ii1 = urllib2 . Request ( iii1i1iI1 , None , ii1I1Iii )
 iiII = urllib2 . urlopen ( I11Iii11i1Ii1 )
 oooO = iiII . read ( )
 iiII . close ( )
 o0OoO0o = '/' . join ( iii1i1iI1 . split ( '/' ) [ 0 : 5 ] )
 i1Ii1II = re . findall ( 'class="list_row".*data-file-id="(.*?)"' , oooO )
 if 11 - 11: o00oO0oo0O0O0 / oooOoO % I1I1i1i
 i1iIii = re . findall ( 'class="name">\s*<a.*data-action-before="preview".*>(.*?)</a>' , oooO )
 oo0OOO0O = HTMLParser . HTMLParser ( )
 if 16 - 16: IIII + IiooO0o0000
 if len ( i1Ii1II ) > 0 :
  try :
   ooo0Oo00o = sqlite3 . connect ( bd )
   IiO0oOoOOooooO = ooo0Oo00o . cursor ( )
   if temp_id > 0 :
    if 15 - 15: OoO0oooOoO0 . o0O0ooOo0 . o0 + o00oO0oo0O0O0 - IiooO0o0000 / iI11
    IiO0oOoOOooooO . execute ( base64 . urlsafe_b64decode ( 'c2VsZWN0IG5fZXBpIGZyb20gc2VyaWVzX3RlbXAgV0hFUkUgc2VyaWVfaWQgPSA_IEFORCB0ZW1wX2lkID0gPw==' ) , ( id , temp_id , ) )
   else :
    if 35 - 35: o00oO0oo0O0O0 % o00oO0oo0O0O0
    IiO0oOoOOooooO . execute ( base64 . urlsafe_b64decode ( 'c2VsZWN0IG5fZXBpIGZyb20gc2VyaWVzIFdIRVJFIHNlcmllX2lkID0gPw==' ) , ( id , ) )
   II1 = IiO0oOoOOooooO . fetchone ( )
   ooo0Oo00o . close ( )
   if II1 [ 0 ] < len ( i1Ii1II ) :
    oooO0 = zlib . decompress ( base64 . urlsafe_b64decode ( o0O00000o0 ( bd ) ) )
    if temp_id > 0 :
     if 52 - 52: IIII - iiIIi1i1Iii % oooOoO - IIoooO0ooO0oo + o0O0ooOo0
     iii1i1iI1 = ( base64 . urlsafe_b64decode ( 'JXMvQmFzZURhdG9zL2VwaS5waHA_aWQ9JXMmdGVtcD0lcyZ2YWw9JXM=' ) ) % (
 oooO0 , id , temp_id , str ( len ( i1Ii1II ) ) )
    else :
     if 7 - 7: o0O0ooOo0 % o0 * i1iI1
     iii1i1iI1 = ( base64 . urlsafe_b64decode ( 'JXMvQmFzZURhdG9zL2VwaS5waHA_aWQ9JXMmdmFsPSVz' ) ) % (
 oooO0 , id , str ( len ( i1Ii1II ) ) )
    oooO0oo0 ( iii1i1iI1 )
    if 56 - 56: oooOoO . iI11
    ooo0Oo00o = sqlite3 . connect ( bd )
    IiO0oOoOOooooO = ooo0Oo00o . cursor ( )
    if temp_id > 0 :
     if 48 - 48: IIII . Ii % i1iI1 . o00oO0oo0O0O0 . oooOoO % Ii
     IiO0oOoOOooooO . execute ( base64 . urlsafe_b64decode ( 'VVBEQVRFIHNlcmllc190ZW1wIFNFVCBuX2VwaT0_IFdIRVJFIHNlcmllX2lkID0gPyBBTkQgdGVtcF9pZCA9ID8=' ) , ( len ( i1Ii1II ) , id , temp_id , ) )
    else :
     if 32 - 32: ii1I1ii1IiIi1 + I1 - I1I1i1i % OoO0oooOoO0 + oOO
     IiO0oOoOOooooO . execute ( base64 . urlsafe_b64decode ( 'VVBEQVRFIHNlcmllcyBTRVQgbl9lcGk9PyBXSEVSRSBzZXJpZV9pZCA9ID8=' ) , ( len ( i1Ii1II ) , id , ) )
    ooo0Oo00o . commit ( )
    ooo0Oo00o . close ( )
  except Exception as O0000Ooo0o0 :
   pass
 for ii11iIIi1I in xrange ( 0 , len ( i1Ii1II ) ) :
  oOo . append ( ( oo0OOO0O . unescape ( i1iIii [ ii11iIIi1I ] ) , o0Oo ( '%s/p,%s,list,1,3.avi' % ( o0OoO0o , i1Ii1II [ ii11iIIi1I ] ) ) ) )
 return oOo
 if 6 - 6: o0 % o0O0ooOo0 . iI11 + oooOoO . o0 % ii1I1ii1IiIi1
def iiIIiiII1 ( url ) :
 url = oooo00OoOoOo0 ( url )
 if 66 - 66: i1iI1 % I1 * I1
 if base64 . urlsafe_b64decode ( 'ZGlza29rb3NtaWtv' ) in url :
  return base64 . urlsafe_b64decode ( 'ZGs=' )
  if 64 - 64: i1iI1 + iI11 . Ii . IIII
 elif base64 . urlsafe_b64decode ( 'Y29waWFwb3A=' ) in url :
  return base64 . urlsafe_b64decode ( 'Y3A=' )
  if 40 - 40: iiIIi1i1Iii * oOO
 elif base64 . urlsafe_b64decode ( 'c3RyZWFtY2xvdWQ=' ) in url :
  return base64 . urlsafe_b64decode ( 'c2M=' )
  if 79 - 79: i1iI1
 elif base64 . urlsafe_b64decode ( 'cGFydGFnb3Jh' ) in url :
  return base64 . urlsafe_b64decode ( 'cHQ=' )
  if 49 - 49: o0 * iI11 % II + I1
 elif base64 . urlsafe_b64decode ( 'a2JhZ2k=' ) in url :
  return base64 . urlsafe_b64decode ( 'a2I=' )
  if 28 - 28: IIII * I1 % oOO + iI11 - IiooO0o0000
 elif base64 . urlsafe_b64decode ( 'cnR2ZQ==' ) in url :
  return base64 . urlsafe_b64decode ( 'cmU=' )
  if 16 - 16: OoO0oooOoO0 % I1I1i1i * IiII1IiI * i1iI1
 elif base64 . urlsafe_b64decode ( 'eW91dHViZQ==' ) in url :
  return base64 . urlsafe_b64decode ( 'eXQ=' )
  if 10 - 10: iiIIi1i1Iii . o0O0ooOo0 % iI11 - iI11 - I1I1i1i
 else :
  return base64 . urlsafe_b64decode ( 'dWs=' )
  if 44 - 44: OOO + IiII1IiI - II . ii1I1ii1IiIi1 / II
  if 23 - 23: o00oO0oo0O0O0 - ii1I1ii1IiIi1 . iI11 + oooOoO
def i11iii ( server , serie ) :
 o0OOoo0 = serie . split ( '/' )
 ii1Ii = '/' . join ( o0OOoo0 [ 3 : 4 ] )
 OOOO0 = '/' . join ( o0OOoo0 [ 4 : 5 ] )
 serie = o0OOoo0 [ 5 ] . split ( ',' ) [ 1 ]
 I1iII11ii1iii = serie
 IIIIO0oOooOoOo0 = '%s/-%s/p,%s,list,1,3.avi' % ( ii1Ii , OOOO0 , serie )
 iii1i1iI1 = '%s/%s/' % ( server , ii1Ii )
 ii1I1Iii = { 'User-agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:19.0) Gecko/20100101 Firefox/19.0' }
 oOO00OoO0oo = '%s/%s' % ( server , IIIIO0oOooOoOo0 )
 ii1I1Iii [ 'referer' ] = iii1i1iI1
 ii1I1Iii [ 'connection' ] = 'keep-alive'
 I11Iii11i1Ii1 = urllib2 . Request ( oOO00OoO0oo , None , ii1I1Iii )
 iiII = urllib2 . urlopen ( I11Iii11i1Ii1 )
 oooO = iiII . read ( )
 iiII . close ( )
 oo0o0ooooO = re . findall ( 'DownloadFile.*f=%s".*RequestVerificationToken.*?value="([^"]+)' % serie , oooO )
 O000000O0OoOo = 0
 try :
  oo0o0ooooO = oo0o0ooooO [ 0 ]
 except :
  O000000O0OoOo = 1
  if 63 - 63: OOoOoO0o0o0OO % IiII1IiI - o00oO0oo0O0O0 * iI11 + o0 / oooOoO
 if O000000O0OoOo == 0 :
  IIiiII111i = '%s/action/DownloadFile?location=fi&amp;f=%s' % ( server , I1iII11ii1iii )
  iiI1I1Ii11i1I = 'fileId=%s&__RequestVerificationToken=%s' % ( I1iII11ii1iii , oo0o0ooooO )
  ii1I1Iii [ 'referer' ] = oOO00OoO0oo
  ii1I1Iii [ 'connection' ] = 'keep-alive'
  I11Iii11i1Ii1 = urllib2 . Request ( IIiiII111i , iiI1I1Ii11i1I , ii1I1Iii )
  iiII = urllib2 . urlopen ( I11Iii11i1Ii1 )
  oooO = iiII . read ( )
  iiII . close ( )
  Ii11i1 = re . findall ( 'DownloadUrl":"([^"]+)' , oooO )
  ooOoOO00OOoo0 = Ii11i1 [ 0 ]
 else :
  ooOoOO00OOoo0 = ''
 return ooOoOO00OOoo0 . strip ( )
 if 50 - 50: OoO0oooOoO0
 if 85 - 85: IiooO0o0000 . II * IIoooO0ooO0oo % II % Ii - o0
 if 100 - 100: II * OOoOoO0o0o0OO + OOO * ii1I1ii1IiIi1 * OOO
def o0Oo ( string ) :
 i1III11 = '7Se10gAIe-T0_a'
 OoOO = [ ]
 for i1i1I11i in xrange ( len ( string ) ) :
  ii1IIII1I11 = i1III11 [ i1i1I11i % len ( i1III11 ) ]
  OoO0 = chr ( ord ( string [ i1i1I11i ] ) + ord ( ii1IIII1I11 ) % 256 )
  OoOO . append ( OoO0 )
 iiiiiIII1111 = '' . join ( OoOO )
 return base64 . urlsafe_b64encode ( iiiiiIII1111 )
 if 84 - 84: iI11 + oOO . I1I1i1i % IiooO0o0000 % IiII1IiI * iiIIi1i1Iii
 if 26 - 26: iiIIi1i1Iii . OoO0oooOoO0
def i1IIiiII ( server , serie ) :
 o0OOoo0 = serie . split ( '/' )
 ii1Ii = '/' . join ( o0OOoo0 [ 3 : 4 ] )
 OOOO0 = '/' . join ( o0OOoo0 [ 4 : 5 ] )
 serie = o0OOoo0 [ 5 ] . split ( ',' ) [ 1 ]
 OOO0Ooo0 = 'http://%s/%s/z-%s/z,%s,list,1,2.bin' % ( server , ii1Ii , OOOO0 , serie )
 iiI1I1Ii11i1I = None
 oO00o = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 oO00o [ 'Connection' ] = 'keep-alive'
 oo0O0 = urllib2 . urlopen
 Ii11 = urllib2 . Request
 I11Iii11i1Ii1 = Ii11 ( OOO0Ooo0 , iiI1I1Ii11i1I , oO00o )
 iiII = oo0O0 ( I11Iii11i1Ii1 )
 IiI1I1II = iiII . info ( ) [ 'Set-Cookie' ]
 oooO = iiII . read ( )
 i1Ii1II = re . search ( 'action="(\\/action\\/DownloadFile\\?location=fi&amp;f=.*?)".*?__RequestVerificationToken.*?value="(.*?)"' , oooO )
 Oo00OooO = 'http://%s%s' % ( server , i1Ii1II . group ( 1 ) . replace ( '&amp;' , '&' ) )
 oo0o0ooooO = i1Ii1II . group ( 2 )
 oO00o = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 oO00o [ 'Referer' ] = OOO0Ooo0
 oO00o [ 'Cookie' ] = IiI1I1II
 oO00o [ 'Connection' ] = 'keep-alive'
 iiI1I1Ii11i1I = 'fileId=%s&__RequestVerificationToken=%s' % ( serie , oo0o0ooooO )
 oo0O0 = urllib2 . urlopen
 Ii11 = urllib2 . Request
 I11Iii11i1Ii1 = Ii11 ( Oo00OooO , iiI1I1Ii11i1I , oO00o )
 iiII = oo0O0 ( I11Iii11i1Ii1 )
 oooO = iiII . read ( )
 import time
 ii = str ( int ( time . time ( ) ) ) + '404'
 oOO00OoO0oo = 'http://%s/action/OAuth/Facebook?TimeStamp=%s' % ( server , ii )
 oO00o = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 oO00o [ 'Referer' ] = OOO0Ooo0
 oO00o [ 'Cookie' ] = IiI1I1II
 oO00o [ 'Connection' ] = 'keep-alive'
 iiI1I1Ii11i1I = None
 oo0O0 = urllib2 . urlopen
 Ii11 = urllib2 . Request
 I11Iii11i1Ii1 = Ii11 ( oOO00OoO0oo , iiI1I1Ii11i1I , oO00o )
 iiII = oo0O0 ( I11Iii11i1Ii1 )
 oO = iiII . info ( ) [ 'Set-Cookie' ]
 oooO = iiII . read ( )
 iii = IiI1I1II . split ( ';' )
 iIIiiIIIIi = oO . split ( ';' )
 for OOoOo0OO in iIIiiIIIIi :
  if OOoOo0OO not in iii :
   iii . append ( OOoOo0OO )
   if 100 - 100: IiII1IiI + oOO
 iIIiiIIIIi = [ ]
 for OOoOo0OO in iii :
  if 'path=/' not in OOoOo0OO and 'HttpOnly' not in OOoOo0OO :
   iIIiiIIIIi . append ( OOoOo0OO )
   if 46 - 46: I1
 IiI1I1II = '; ' . join ( iIIiiIIIIi ) . replace ( '  ' , ' ' )
 IIiiII111i = 'http://%s/action/Account/Login' % server
 oO00o = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 oO00o [ 'Accept' ] = '*/*'
 oO00o [ 'Accept-Language' ] = 'es-ES,es;q=0.8,en-US;q=0.5,en;q=0.3'
 oO00o [ 'Accept-Encoding' ] = 'gzip, deflate'
 oO00o [ 'Content-Type' ] = 'application/x-www-form-urlencoded; charset=UTF-8'
 oO00o [ 'X-Requested-With' ] = 'XMLHttpRequest'
 oO00o [ 'Referer' ] = OOO0Ooo0
 oO00o [ 'Cookie' ] = IiI1I1II
 oO00o [ 'Connection' ] = 'keep-alive'
 iiI1I1Ii11i1I = '__RequestVerificationToken=%s&UserName=amistad&Password=asegurada' % oo0o0ooooO
 oo0O0 = urllib2 . urlopen
 Ii11 = urllib2 . Request
 I11Iii11i1Ii1 = Ii11 ( IIiiII111i , iiI1I1Ii11i1I , oO00o )
 iiII = oo0O0 ( I11Iii11i1Ii1 )
 oO = iiII . info ( ) [ 'Set-Cookie' ]
 oooO = iiII . read ( )
 iii = IiI1I1II . split ( ';' )
 iIIiiIIIIi = oO . split ( ';' )
 for OOoOo0OO in iIIiiIIIIi :
  if OOoOo0OO not in iii :
   iii . append ( OOoOo0OO )
   if 27 - 27: I1
 iIIiiIIIIi = [ ]
 for OOoOo0OO in iii :
  if 'path=/' not in OOoOo0OO and 'HttpOnly' not in OOoOo0OO :
   iIIiiIIIIi . append ( OOoOo0OO )
   if 63 - 63: o00oO0oo0O0O0
 IiI1I1II = '; ' . join ( iIIiiIIIIi ) . replace ( '  ' , ' ' )
 oO = ''
 oO00o = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 oO00o [ 'Referer' ] = OOO0Ooo0
 oO00o [ 'Cookie' ] = IiI1I1II
 oO00o [ 'Connection' ] = 'keep-alive'
 iiI1I1Ii11i1I = 'fileId=%s&__RequestVerificationToken=%s' % ( serie , oo0o0ooooO )
 oo0O0 = urllib2 . urlopen
 Ii11 = urllib2 . Request
 I11Iii11i1Ii1 = Ii11 ( Oo00OooO , iiI1I1Ii11i1I , oO00o )
 iiII = oo0O0 ( I11Iii11i1Ii1 )
 oooO = iiII . read ( )
 i1Ii1II = re . search ( 'DownloadUrl":"(.*?)"' , oooO )
 return i1Ii1II . group ( 1 )
 if 11 - 11: iI11 + II . I1I1i1i / II + I1 % IiII1IiI
 if 29 - 29: IIII . IiooO0o0000 . IiooO0o0000 % o0 + o0O0ooOo0 - o0O0ooOo0
def ooOO ( link ) :
 oOO0oooo = re . findall ( 'list=(.*?)(?:&|\s|$)+' , oooo00OoOoOo0 ( link ) , flags = re . DOTALL )
 iI = [ ]
 if len ( oOO0oooo ) > 0 :
  for i1i1I11i in oOO0oooo :
   iI . append ( 'plugin://plugin.video.youtube/playlist/%s/' % str ( oOO0oooo [ 0 ] ) )
  return iI
 else :
  return None
  if 7 - 7: o0O0ooOo0 / o0O0ooOo0
  if 82 - 82: IiII1IiI . II . IiooO0o0000 - OoO0oooOoO0
def IIIII ( ser , tit , base , id ) :
 Ii1iI1i1iI1iI = int ( sys . argv [ 1 ] )
 try :
  oooO0 = zlib . decompress ( base64 . urlsafe_b64decode ( o0O00000o0 ( base ) ) )
  if 9 - 9: OoO0oooOoO0 . I1 * ii1I1ii1IiIi1 / i1iI1 * OoO0oooOoO0
  iii1i1iI1 = ( base64 . urlsafe_b64decode ( 'JXMvQmFzZURhdG9zL3ZpZXdzLnBocD9pZD0lcw==' ) ) % ( oooO0 , id )
  oooO0oo0 ( iii1i1iI1 )
  if 62 - 62: o00oO0oo0O0O0 / oooOoO / oOO + i1iI1 % IiII1IiI
  ooo0Oo00o = sqlite3 . connect ( base )
  IiO0oOoOOooooO = ooo0Oo00o . cursor ( )
  if 71 - 71: o0O0ooOo0 . oOO . o0 * Ii
  IiO0oOoOOooooO . execute ( base64 . urlsafe_b64decode ( 'dXBkYXRlIHNlcmllcyBzZXQgdmlld3M9dmlld3MrMSB3aGVyZSBzZXJpZV9pZCA9ID8=' ) , ( id , ) )
  ooo0Oo00o . commit ( )
  ooo0Oo00o . close ( )
 except :
  pass
 Oo0oOOoOOO = iiIIiiII1 ( ser )
 ser = oooo00OoOoOo0 ( ser )
 tit = base64 . urlsafe_b64decode ( tit )
 if 17 - 17: o0O0ooOo0 - I1I1i1i + IiII1IiI * I1I1i1i
 if 59 - 59: IIII - ii1I1ii1IiIi1 . oooOoO % IIII + I1 % IIoooO0ooO0oo
 if 53 - 53: OOO / IIII - oOO
 if 98 - 98: OoO0oooOoO0 + OOO / i1iI1
 if 23 - 23: OoO0oooOoO0 / OOO * IIoooO0ooO0oo
 if 98 - 98: ii1I1ii1IiIi1 . OOoOoO0o0o0OO % oooOoO
 if 4 - 4: OOO . ii1I1ii1IiIi1 . II
 if 91 - 91: ii1I1ii1IiIi1 . OoO0oooOoO0 % IiooO0o0000 / o0O0ooOo0
 if Oo0oOOoOOO == 'cp' :
  ooOoOO00OOoo0 = i1IIiiII ( base64 . urlsafe_b64decode ( 'Y29waWFwb3AuY29t' ) , ser )
  oO0 = xbmcgui . ListItem ( path = ooOoOO00OOoo0 . strip ( ) )
  oO0 . setInfo ( 'video' , { 'title' : tit } )
  xbmcplugin . setResolvedUrl ( Ii1iI1i1iI1iI , True , oO0 )
 elif Oo0oOOoOOO == 'kb' :
  ooOoOO00OOoo0 = i1IIiiII ( 'kbagi.com' , ser )
  oO0 = xbmcgui . ListItem ( path = ooOoOO00OOoo0 . strip ( ) )
  oO0 . setInfo ( 'video' , { 'title' : tit } )
  xbmcplugin . setResolvedUrl ( Ii1iI1i1iI1iI , True , oO0 )
 elif Oo0oOOoOOO == 'dk' :
  ooOoOO00OOoo0 = i11iii ( base64 . urlsafe_b64decode ( 'aHR0cDovL2Rpc2tva29zbWlrby5teA==' ) , ser )
  if ooOoOO00OOoo0 == '' :
   ooOoOOOO = 'El enlace ya no existe'
   oO0 = xbmcgui . ListItem ( ooOoOOOO , iconImage = 'DefaultVideo.png' )
   xbmcplugin . setResolvedUrl ( Ii1iI1i1iI1iI , False , oO0 )
   o0O000oOO = xbmcgui . Dialog ( )
   o0O000oOO . notification ( 'Serie' , ooOoOOOO , xbmcgui . NOTIFICATION_INFO , 5000 )
  else :
   oO0 = xbmcgui . ListItem ( path = ooOoOO00OOoo0 . strip ( ) )
   oO0 . setInfo ( 'video' , { 'title' : tit } )
   xbmcplugin . setResolvedUrl ( Ii1iI1i1iI1iI , True , oO0 )
 elif Oo0oOOoOOO == 're' or Oo0oOOoOOO == 'yt' :
  if Oo0oOOoOOO == 'yt' :
   ooOoOO00OOoo0 = ooOO ( ser )
  else :
   ooOoOO00OOoo0 = ser
  oO0 = xbmcgui . ListItem ( path = ooOoOO00OOoo0 . strip ( ) )
  oO0 . setInfo ( 'video' , { 'title' : tit } )
  xbmcplugin . setResolvedUrl ( Ii1iI1i1iI1iI , True , oO0 )
 elif Oo0oOOoOOO == 'pt' :
  ooOoOO00OOoo0 = i11iii ( base64 . urlsafe_b64decode ( 'aHR0cDovL3BhcnRhZ29yYS5jb20=' ) , ser )
  if ooOoOO00OOoo0 == '' :
   ooOoOOOO = 'El enlace ya no existe'
   oO0 = xbmcgui . ListItem ( ooOoOOOO , iconImage = 'DefaultVideo.png' )
   xbmcplugin . setResolvedUrl ( Ii1iI1i1iI1iI , False , oO0 )
   o0O000oOO = xbmcgui . Dialog ( )
   o0O000oOO . notification ( 'Serie' , ooOoOOOO , xbmcgui . NOTIFICATION_INFO , 5000 )
  else :
   oO0 = xbmcgui . ListItem ( path = ooOoOO00OOoo0 . strip ( ) )
   oO0 . setInfo ( 'video' , { 'title' : tit } )
   xbmcplugin . setResolvedUrl ( Ii1iI1i1iI1iI , True , oO0 )
 elif Oo0oOOoOOO == 'sc' :
  IIIIOo0OoOO = ser . split ( ' ' )
  while 1 == 1 :
   if not IIIIOo0OoOO :
    ooOoOOOO = 'Serie en preparaci\xc3\xb3n'
    oO0 = xbmcgui . ListItem ( ooOoOOOO , iconImage = 'DefaultVideo.png' )
    xbmcplugin . setResolvedUrl ( Ii1iI1i1iI1iI , False , oO0 )
    o0O000oOO = xbmcgui . Dialog ( )
    o0O000oOO . notification ( 'Serie' , ooOoOOOO , xbmcgui . NOTIFICATION_INFO , 5000 )
    break
   for IiIIIii1ii in IIIIOo0OoOO :
    IIIIOo0OoOO . remove ( IiIIIii1ii )
    iii1i1iI1 = IiIIIii1ii
    oooO = oooO0oo0 ( IiIIIii1ii )
    if '<h1>File Not Found</h1>' in oooO or '<h1>Archivo no encontrado</h1>' in oooO or oooO == 'Not Found' :
     oooO = ''
    else :
     break
     if 16 - 16: IiII1IiI * I1 * I1
   if oooO == '' :
    ooOoOOOO = 'El enlace ya no existe'
    oO0 = xbmcgui . ListItem ( ooOoOOOO , iconImage = 'DefaultVideo.png' )
    xbmcplugin . setResolvedUrl ( Ii1iI1i1iI1iI , False , oO0 )
    o0O000oOO = xbmcgui . Dialog ( )
    o0O000oOO . notification ( 'Serie' , ooOoOOOO , xbmcgui . NOTIFICATION_INFO , 5000 )
    break
   ooOoOO00OOoo0 = re . findall ( 'file\\: "([^"]+)"' , oooO , flags = re . DOTALL )
   if not ooOoOO00OOoo0 :
    iiI1I1Ii11i1I = ''
    oooo0o = re . findall ( '<input.*?name="([^"]+)".*?value="([^"]*)">' , oooO , flags = re . DOTALL )
    for ooOOIII11II11I111 , i1iI11IiI1iI1 in oooo0o :
     iiI1I1Ii11i1I += ooOOIII11II11I111 + '=' + i1iI11IiI1iI1 + '&'
     if 77 - 77: oooOoO / OoO0oooOoO0
    iiI1I1Ii11i1I = iiI1I1Ii11i1I . replace ( 'op=download1' , 'op=download2' )
    oooO = oooO0oo0 ( iii1i1iI1 , post = iiI1I1Ii11i1I )
    if 'id="justanotice"' in oooO :
     return [ ]
    ooOoOO00OOoo0 = re . findall ( 'file\\: "([^"]+)"' , oooO , flags = re . DOTALL )
   try :
    ooOoOO00OOoo0 = ooOoOO00OOoo0 [ 0 ]
    oO0 = xbmcgui . ListItem ( path = ooOoOO00OOoo0 )
    oO0 . setInfo ( 'video' , { 'title' : tit } )
    xbmcplugin . setResolvedUrl ( Ii1iI1i1iI1iI , True , oO0 )
    break
   except :
    pass
 else :
  ooOoOOOO = 'Servidor no soportado'
  oO0 = xbmcgui . ListItem ( ooOoOOOO , iconImage = 'DefaultVideo.png' )
  xbmcplugin . setResolvedUrl ( Ii1iI1i1iI1iI , False , oO0 )
  o0O000oOO = xbmcgui . Dialog ( )
  o0O000oOO . notification ( 'Series' , ooOoOOOO , xbmcgui . NOTIFICATION_INFO , 5000 )
  if 30 - 30: IIoooO0ooO0oo - ii1I1ii1IiIi1 . OOO / i1iI1 - II
  if 88 - 88: OoO0oooOoO0 * o0 * IIII + o0
def Ii1 ( bas , data ) :
 o0O = data . split ( '.' )
 if o0O [ 0 ] == 'cp' :
  o0O = i1IIiiII ( base64 . urlsafe_b64decode ( 'Y29waWFwb3AuY29t' ) , o0O [ 1 ] )
 elif o0O [ 0 ] == 'dk' :
  o0O = i11iii ( base64 . urlsafe_b64decode ( 'aHR0cDovL2Rpc2tva29zbWlrby5teA==' ) , o0O [ 1 ] )
 else :
  if 79 - 79: o0O0ooOo0 + OOoOoO0o0o0OO - ii1I1ii1IiIi1 / Ii * o0O0ooOo0 . oooOoO
  o0O = base64 . urlsafe_b64decode ( 'JXMvYmFzX2VuYy5jbXA=' ) % data
 data = oooO0oo0 ( o0O )
 try :
  data = zlib . decompress ( data )
 except :
  pass
 oOo = open ( bas , 'wb' )
 oOo . write ( data )
 oOo . close ( )
 ooo0Oo00o = sqlite3 . connect ( bas )
 IiO0oOoOOooooO = ooo0Oo00o . cursor ( )
 if 81 - 81: o00oO0oo0O0O0 * II * Ii + iiIIi1i1Iii + iI11
 IiO0oOoOOooooO . execute ( base64 . urlsafe_b64decode ( 'U2VsZWN0IHZlcnNpb24sIChzZWxlY3QgY291bnQoKikgZnJvbSBzZXJpZXMpIGFzIGNudCBmcm9tIHZlcnNpb24=' ) )
 o0IiIIII1IiI1 = IiO0oOoOOooooO . fetchone ( )
 ooo0Oo00o . close ( )
 ooOoOOOO = 'Vers. %s (%s series distintas)' % ( o0IiIIII1IiI1 [ 0 ] , o0IiIIII1IiI1 [ 1 ] )
 xbmcgui . Dialog ( ) . notification ( 'Series' , ooOoOOOO , xbmcgui . NOTIFICATION_INFO , 5000 )
 if 14 - 14: o0
 if 1 - 1: iI11 % oooOoO
def I1I1i11iiIi ( bas ) :
 oooO0 = o0O00000o0 ( bas )
 if oooO0 == '' :
  oooO0 = iI1iI1i11II ( )
 oooO0 = zlib . decompress ( base64 . urlsafe_b64decode ( oooO0 ) )
 if os . path . isfile ( bas ) :
  try :
   if 78 - 78: I1I1i1i % II
   o0IiIIII1IiI1 = oooO0oo0 ( base64 . urlsafe_b64decode ( 'JXMvYmFzLmluZm8=' ) % oooO0 )
   iiO0O00ooo00Ooo = o0IiIIII1IiI1 . split ( ' ' )
   try :
    ooo0Oo00o = sqlite3 . connect ( bas )
    IiO0oOoOOooooO = ooo0Oo00o . cursor ( )
    if 8 - 8: o0O0ooOo0 - OOO
    IiO0oOoOOooooO . execute ( base64 . urlsafe_b64decode ( 'U2VsZWN0IHZlcnNpb24gZnJvbSB2ZXJzaW9u' ) )
    II1 = IiO0oOoOOooooO . fetchone ( )
    ooo0Oo00o . close ( )
    II1 = str ( II1 [ 0 ] )
    if int ( II1 ) < int ( iiO0O00ooo00Ooo [ 0 ] ) :
     xbmc . log ( '[addon.Series] Found new version %s against the current one %s' % ( iiO0O00ooo00Ooo [ 0 ] , II1 ) )
     Ii1 ( bas , oooo00OoOoOo0 ( iiO0O00ooo00Ooo [ 1 ] . strip ( ) ) )
   except :
    Ii1 ( bas , oooo00OoOoOo0 ( iiO0O00ooo00Ooo [ 1 ] . strip ( ) ) )
  except ( HTTPError , URLError ) as O0000Ooo0o0 :
   traceback . print_exc ( file = sys . stdout )
   ooOoOOOO = 'El plugin no puede ser actualizado'
   xbmcgui . Dialog ( ) . notification ( 'Series' , ooOoOOOO , xbmcgui . NOTIFICATION_WARNING , 5000 )
   if 10 - 10: OOoOoO0o0o0OO % o00oO0oo0O0O0 + Ii / IIII - I1I1i1i % oooOoO
 else :
  try :
   o0IiIIII1IiI1 = oooO0oo0 ( base64 . urlsafe_b64decode ( 'JXMvYmFzLmluZm8=' ) % oooO0 )
   iiO0O00ooo00Ooo = o0IiIIII1IiI1 . split ( ' ' )
   Ii1 ( bas , oooo00OoOoOo0 ( iiO0O00ooo00Ooo [ 1 ] . strip ( ) ) )
  except HTTPError :
   ooOoOOOO = 'El plugin no se puede cargar'
   xbmcgui . Dialog ( ) . notification ( 'Series' , ooOoOOOO , xbmcgui . NOTIFICATION_ERROR , 5000 )
   xbmc . executebuiltin ( 'Action(Back)' )
 import xbmcaddon
 Ii111I1IIi1 = xbmcaddon . Addon ( )
 oOO0oOOoOooo = xbmc . translatePath ( Ii111I1IIi1 . getAddonInfo ( 'path' ) . decode ( 'utf-8' ) )
 if 27 - 27: oooOoO . I1I1i1i - OoO0oooOoO0
 if os . path . isfile ( base64 . urlsafe_b64decode ( 'JXMvc2VyaWVjcnlwdC5weQ==' ) % oOO0oOOoOooo ) :
  os . remove ( base64 . urlsafe_b64decode ( 'JXMvc2VyaWVjcnlwdC5weQ==' ) % oOO0oOOoOooo ) # 807cb1bfffb234dace3f930f571a9039d76f4cf9
')